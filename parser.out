Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> VAR SEMICOLON variable
Rule 2     variable -> varf FUNC SEMICOLON funciones
Rule 3     variable -> FUNC SEMICOLON funciones
Rule 4     funciones -> funcionf MAIN SEMICOLON maines
Rule 5     funciones -> MAIN SEMICOLON maines
Rule 6     maines -> mainf
Rule 7     maines -> empty
Rule 8     varf -> tipo varp
Rule 9     varp -> ID array varpp
Rule 10    varp -> ID varpp
Rule 11    varpp -> AEQL exp varppp
Rule 12    varpp -> varppp
Rule 13    varppp -> COMMA varp
Rule 14    varppp -> SEMICOLON varpppp empty
Rule 15    varpppp -> varf
Rule 16    varpppp -> empty
Rule 17    tipo -> INT
Rule 18    tipo -> FLOAT
Rule 19    array -> LBRK exp RBRK
Rule 20    exp -> termino PLUS exp
Rule 21    exp -> termino MINUS exp
Rule 22    exp -> termino empty
Rule 23    termino -> factor MULT termino
Rule 24    termino -> factor SLASH termino
Rule 25    termino -> factor empty
Rule 26    factor -> LPAR exp RPAR
Rule 27    factor -> PLUS varcte
Rule 28    factor -> MINUS varcte
Rule 29    factor -> varcte
Rule 30    varcte -> ID
Rule 31    varcte -> NUMFLOAT
Rule 32    varcte -> NUMINT
Rule 33    funcionf -> VOID ID LPAR funcionp RPAR bloque SEMICOLON
Rule 34    funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
Rule 35    funcionp -> funcionpp
Rule 36    funcionp -> empty
Rule 37    funcionpp -> tipo ID funcionppp
Rule 38    funcionppp -> COMMA funcionpp
Rule 39    funcionppp -> empty
Rule 40    funcionpppp -> funcionf
Rule 41    funcionpppp -> empty
Rule 42    bloque -> LKEY bloquep
Rule 43    bloque -> LKEY bloqueppp
Rule 44    bloquep -> estatuto bloquepp
Rule 45    bloquepp -> bloquep
Rule 46    bloquepp -> bloqueppp
Rule 47    bloqueppp -> RKEY
Rule 48    estatuto -> asignacion
Rule 49    estatuto -> condif
Rule 50    estatuto -> condwhile
Rule 51    estatuto -> conddowhile
Rule 52    estatuto -> escritura
Rule 53    asignacion -> ID AEQL exp SEMICOLON
Rule 54    escritura -> PRINT LPAR escriturap
Rule 55    escriturap -> exp escriturapp
Rule 56    escriturap -> STRING escriturapp
Rule 57    escriturapp -> COMMA escriturap
Rule 58    escriturapp -> RPAR SEMICOLON
Rule 59    condif -> IF LPAR expresion RPAR bloque condifp
Rule 60    condifp -> ELSE bloque SEMICOLON
Rule 61    condifp -> SEMICOLON
Rule 62    condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON
Rule 63    conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON
Rule 64    expresion -> exp expresionp
Rule 65    expresionp -> MORETHAN expresionpp
Rule 66    expresionp -> LESSTHAN expresionpp
Rule 67    expresionp -> EQL expresionpp
Rule 68    expresionp -> NOTEQL expresionpp
Rule 69    expresionpp -> exp
Rule 70    mainf -> bloque SEMICOLON
Rule 71    empty -> <empty>

Terminals, with rules where they appear

AEQL                 : 11 53
COMMA                : 13 38 57
DO                   : 63
ELSE                 : 60
EQL                  : 67
FLOAT                : 18
FUNC                 : 2 3
ID                   : 9 10 30 33 34 37 53
IF                   : 59
INT                  : 17
LBRK                 : 19
LESSTHAN             : 66
LKEY                 : 42 43
LPAR                 : 26 33 34 34 54 59 62 63
MAIN                 : 4 5
MINUS                : 21 28
MORETHAN             : 65
MULT                 : 23
NOTEQL               : 68
NUMFLOAT             : 31
NUMINT               : 32
PLUS                 : 20 27
PRINT                : 54
RBRK                 : 19
RETURN               : 34
RKEY                 : 47
RPAR                 : 26 33 34 34 58 59 62 63
SEMICOLON            : 1 2 3 4 5 14 33 34 53 58 60 61 62 63 70
SLASH                : 24
STRING               : 56
VAR                  : 1
VOID                 : 33
WHILE                : 62 63
error                : 

Nonterminals, with rules where they appear

array                : 9
asignacion           : 48
bloque               : 33 34 59 60 62 63 70
bloquep              : 42 45
bloquepp             : 44
bloqueppp            : 43 46
conddowhile          : 51
condif               : 49
condifp              : 59
condwhile            : 50
empty                : 7 14 16 22 25 36 39 41
escritura            : 52
escriturap           : 54 57
escriturapp          : 55 56
estatuto             : 44
exp                  : 11 19 20 21 26 34 53 55 64 69
expresion            : 59 62 63
expresionp           : 64
expresionpp          : 65 66 67 68
factor               : 23 24 25
funciones            : 2 3
funcionf             : 4 40
funcionp             : 33 34
funcionpp            : 35 38
funcionppp           : 37
funcionpppp          : 34
maines               : 4 5
mainf                : 6
programa             : 0
termino              : 20 21 22 23 24
tipo                 : 8 34 37
varcte               : 27 28 29
varf                 : 2 15
variable             : 1
varp                 : 8 13
varpp                : 9 10
varppp               : 11 12
varpppp              : 14

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . VAR SEMICOLON variable

    VAR             shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> VAR . SEMICOLON variable

    SEMICOLON       shift and go to state 3


state 3

    (1) programa -> VAR SEMICOLON . variable
    (2) variable -> . varf FUNC SEMICOLON funciones
    (3) variable -> . FUNC SEMICOLON funciones
    (8) varf -> . tipo varp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    FUNC            shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    variable                       shift and go to state 4
    varf                           shift and go to state 5
    tipo                           shift and go to state 7

state 4

    (1) programa -> VAR SEMICOLON variable .

    $end            reduce using rule 1 (programa -> VAR SEMICOLON variable .)


state 5

    (2) variable -> varf . FUNC SEMICOLON funciones

    FUNC            shift and go to state 10


state 6

    (3) variable -> FUNC . SEMICOLON funciones

    SEMICOLON       shift and go to state 11


state 7

    (8) varf -> tipo . varp
    (9) varp -> . ID array varpp
    (10) varp -> . ID varpp

    ID              shift and go to state 13

    varp                           shift and go to state 12

state 8

    (17) tipo -> INT .

    ID              reduce using rule 17 (tipo -> INT .)


state 9

    (18) tipo -> FLOAT .

    ID              reduce using rule 18 (tipo -> FLOAT .)


state 10

    (2) variable -> varf FUNC . SEMICOLON funciones

    SEMICOLON       shift and go to state 14


state 11

    (3) variable -> FUNC SEMICOLON . funciones
    (4) funciones -> . funcionf MAIN SEMICOLON maines
    (5) funciones -> . MAIN SEMICOLON maines
    (33) funcionf -> . VOID ID LPAR funcionp RPAR bloque SEMICOLON
    (34) funcionf -> . tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    MAIN            shift and go to state 17
    VOID            shift and go to state 18
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    funciones                      shift and go to state 15
    funcionf                       shift and go to state 16
    tipo                           shift and go to state 19

state 12

    (8) varf -> tipo varp .

    FUNC            reduce using rule 8 (varf -> tipo varp .)


state 13

    (9) varp -> ID . array varpp
    (10) varp -> ID . varpp
    (19) array -> . LBRK exp RBRK
    (11) varpp -> . AEQL exp varppp
    (12) varpp -> . varppp
    (13) varppp -> . COMMA varp
    (14) varppp -> . SEMICOLON varpppp empty

    LBRK            shift and go to state 22
    AEQL            shift and go to state 23
    COMMA           shift and go to state 25
    SEMICOLON       shift and go to state 26

    array                          shift and go to state 20
    varpp                          shift and go to state 21
    varppp                         shift and go to state 24

state 14

    (2) variable -> varf FUNC SEMICOLON . funciones
    (4) funciones -> . funcionf MAIN SEMICOLON maines
    (5) funciones -> . MAIN SEMICOLON maines
    (33) funcionf -> . VOID ID LPAR funcionp RPAR bloque SEMICOLON
    (34) funcionf -> . tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    MAIN            shift and go to state 17
    VOID            shift and go to state 18
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    funciones                      shift and go to state 27
    funcionf                       shift and go to state 16
    tipo                           shift and go to state 19

state 15

    (3) variable -> FUNC SEMICOLON funciones .

    $end            reduce using rule 3 (variable -> FUNC SEMICOLON funciones .)


state 16

    (4) funciones -> funcionf . MAIN SEMICOLON maines

    MAIN            shift and go to state 28


state 17

    (5) funciones -> MAIN . SEMICOLON maines

    SEMICOLON       shift and go to state 29


state 18

    (33) funcionf -> VOID . ID LPAR funcionp RPAR bloque SEMICOLON

    ID              shift and go to state 30


state 19

    (34) funcionf -> tipo . ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp

    ID              shift and go to state 31


state 20

    (9) varp -> ID array . varpp
    (11) varpp -> . AEQL exp varppp
    (12) varpp -> . varppp
    (13) varppp -> . COMMA varp
    (14) varppp -> . SEMICOLON varpppp empty

    AEQL            shift and go to state 23
    COMMA           shift and go to state 25
    SEMICOLON       shift and go to state 26

    varpp                          shift and go to state 32
    varppp                         shift and go to state 24

state 21

    (10) varp -> ID varpp .

    FUNC            reduce using rule 10 (varp -> ID varpp .)


state 22

    (19) array -> LBRK . exp RBRK
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 33
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 23

    (11) varpp -> AEQL . exp varppp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 43
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 24

    (12) varpp -> varppp .

    FUNC            reduce using rule 12 (varpp -> varppp .)


state 25

    (13) varppp -> COMMA . varp
    (9) varp -> . ID array varpp
    (10) varp -> . ID varpp

    ID              shift and go to state 13

    varp                           shift and go to state 44

state 26

    (14) varppp -> SEMICOLON . varpppp empty
    (15) varpppp -> . varf
    (16) varpppp -> . empty
    (8) varf -> . tipo varp
    (71) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    FUNC            reduce using rule 71 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    varpppp                        shift and go to state 45
    empty                          shift and go to state 46
    varf                           shift and go to state 47
    tipo                           shift and go to state 7

state 27

    (2) variable -> varf FUNC SEMICOLON funciones .

    $end            reduce using rule 2 (variable -> varf FUNC SEMICOLON funciones .)


state 28

    (4) funciones -> funcionf MAIN . SEMICOLON maines

    SEMICOLON       shift and go to state 48


state 29

    (5) funciones -> MAIN SEMICOLON . maines
    (6) maines -> . mainf
    (7) maines -> . empty
    (70) mainf -> . bloque SEMICOLON
    (71) empty -> .
    (42) bloque -> . LKEY bloquep
    (43) bloque -> . LKEY bloqueppp

    $end            reduce using rule 71 (empty -> .)
    LKEY            shift and go to state 53

    maines                         shift and go to state 49
    mainf                          shift and go to state 50
    empty                          shift and go to state 51
    bloque                         shift and go to state 52

state 30

    (33) funcionf -> VOID ID . LPAR funcionp RPAR bloque SEMICOLON

    LPAR            shift and go to state 54


state 31

    (34) funcionf -> tipo ID . LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp

    LPAR            shift and go to state 55


state 32

    (9) varp -> ID array varpp .

    FUNC            reduce using rule 9 (varp -> ID array varpp .)


state 33

    (19) array -> LBRK exp . RBRK

    RBRK            shift and go to state 56


state 34

    (20) exp -> termino . PLUS exp
    (21) exp -> termino . MINUS exp
    (22) exp -> termino . empty
    (71) empty -> .

    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    RBRK            reduce using rule 71 (empty -> .)
    COMMA           reduce using rule 71 (empty -> .)
    SEMICOLON       reduce using rule 71 (empty -> .)
    RPAR            reduce using rule 71 (empty -> .)
    MORETHAN        reduce using rule 71 (empty -> .)
    LESSTHAN        reduce using rule 71 (empty -> .)
    EQL             reduce using rule 71 (empty -> .)
    NOTEQL          reduce using rule 71 (empty -> .)

    empty                          shift and go to state 59

state 35

    (27) factor -> PLUS . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    varcte                         shift and go to state 60

state 36

    (28) factor -> MINUS . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    varcte                         shift and go to state 61

state 37

    (23) termino -> factor . MULT termino
    (24) termino -> factor . SLASH termino
    (25) termino -> factor . empty
    (71) empty -> .

    MULT            shift and go to state 62
    SLASH           shift and go to state 63
    PLUS            reduce using rule 71 (empty -> .)
    MINUS           reduce using rule 71 (empty -> .)
    RBRK            reduce using rule 71 (empty -> .)
    COMMA           reduce using rule 71 (empty -> .)
    SEMICOLON       reduce using rule 71 (empty -> .)
    RPAR            reduce using rule 71 (empty -> .)
    MORETHAN        reduce using rule 71 (empty -> .)
    LESSTHAN        reduce using rule 71 (empty -> .)
    EQL             reduce using rule 71 (empty -> .)
    NOTEQL          reduce using rule 71 (empty -> .)

    empty                          shift and go to state 64

state 38

    (26) factor -> LPAR . exp RPAR
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 65
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 39

    (29) factor -> varcte .

    MULT            reduce using rule 29 (factor -> varcte .)
    SLASH           reduce using rule 29 (factor -> varcte .)
    PLUS            reduce using rule 29 (factor -> varcte .)
    MINUS           reduce using rule 29 (factor -> varcte .)
    RBRK            reduce using rule 29 (factor -> varcte .)
    COMMA           reduce using rule 29 (factor -> varcte .)
    SEMICOLON       reduce using rule 29 (factor -> varcte .)
    RPAR            reduce using rule 29 (factor -> varcte .)
    MORETHAN        reduce using rule 29 (factor -> varcte .)
    LESSTHAN        reduce using rule 29 (factor -> varcte .)
    EQL             reduce using rule 29 (factor -> varcte .)
    NOTEQL          reduce using rule 29 (factor -> varcte .)


state 40

    (30) varcte -> ID .

    MULT            reduce using rule 30 (varcte -> ID .)
    SLASH           reduce using rule 30 (varcte -> ID .)
    PLUS            reduce using rule 30 (varcte -> ID .)
    MINUS           reduce using rule 30 (varcte -> ID .)
    RBRK            reduce using rule 30 (varcte -> ID .)
    COMMA           reduce using rule 30 (varcte -> ID .)
    SEMICOLON       reduce using rule 30 (varcte -> ID .)
    RPAR            reduce using rule 30 (varcte -> ID .)
    MORETHAN        reduce using rule 30 (varcte -> ID .)
    LESSTHAN        reduce using rule 30 (varcte -> ID .)
    EQL             reduce using rule 30 (varcte -> ID .)
    NOTEQL          reduce using rule 30 (varcte -> ID .)


state 41

    (31) varcte -> NUMFLOAT .

    MULT            reduce using rule 31 (varcte -> NUMFLOAT .)
    SLASH           reduce using rule 31 (varcte -> NUMFLOAT .)
    PLUS            reduce using rule 31 (varcte -> NUMFLOAT .)
    MINUS           reduce using rule 31 (varcte -> NUMFLOAT .)
    RBRK            reduce using rule 31 (varcte -> NUMFLOAT .)
    COMMA           reduce using rule 31 (varcte -> NUMFLOAT .)
    SEMICOLON       reduce using rule 31 (varcte -> NUMFLOAT .)
    RPAR            reduce using rule 31 (varcte -> NUMFLOAT .)
    MORETHAN        reduce using rule 31 (varcte -> NUMFLOAT .)
    LESSTHAN        reduce using rule 31 (varcte -> NUMFLOAT .)
    EQL             reduce using rule 31 (varcte -> NUMFLOAT .)
    NOTEQL          reduce using rule 31 (varcte -> NUMFLOAT .)


state 42

    (32) varcte -> NUMINT .

    MULT            reduce using rule 32 (varcte -> NUMINT .)
    SLASH           reduce using rule 32 (varcte -> NUMINT .)
    PLUS            reduce using rule 32 (varcte -> NUMINT .)
    MINUS           reduce using rule 32 (varcte -> NUMINT .)
    RBRK            reduce using rule 32 (varcte -> NUMINT .)
    COMMA           reduce using rule 32 (varcte -> NUMINT .)
    SEMICOLON       reduce using rule 32 (varcte -> NUMINT .)
    RPAR            reduce using rule 32 (varcte -> NUMINT .)
    MORETHAN        reduce using rule 32 (varcte -> NUMINT .)
    LESSTHAN        reduce using rule 32 (varcte -> NUMINT .)
    EQL             reduce using rule 32 (varcte -> NUMINT .)
    NOTEQL          reduce using rule 32 (varcte -> NUMINT .)


state 43

    (11) varpp -> AEQL exp . varppp
    (13) varppp -> . COMMA varp
    (14) varppp -> . SEMICOLON varpppp empty

    COMMA           shift and go to state 25
    SEMICOLON       shift and go to state 26

    varppp                         shift and go to state 66

state 44

    (13) varppp -> COMMA varp .

    FUNC            reduce using rule 13 (varppp -> COMMA varp .)


state 45

    (14) varppp -> SEMICOLON varpppp . empty
    (71) empty -> .

    FUNC            reduce using rule 71 (empty -> .)

    empty                          shift and go to state 67

state 46

    (16) varpppp -> empty .

    FUNC            reduce using rule 16 (varpppp -> empty .)


state 47

    (15) varpppp -> varf .

    FUNC            reduce using rule 15 (varpppp -> varf .)


state 48

    (4) funciones -> funcionf MAIN SEMICOLON . maines
    (6) maines -> . mainf
    (7) maines -> . empty
    (70) mainf -> . bloque SEMICOLON
    (71) empty -> .
    (42) bloque -> . LKEY bloquep
    (43) bloque -> . LKEY bloqueppp

    $end            reduce using rule 71 (empty -> .)
    LKEY            shift and go to state 53

    maines                         shift and go to state 68
    mainf                          shift and go to state 50
    empty                          shift and go to state 51
    bloque                         shift and go to state 52

state 49

    (5) funciones -> MAIN SEMICOLON maines .

    $end            reduce using rule 5 (funciones -> MAIN SEMICOLON maines .)


state 50

    (6) maines -> mainf .

    $end            reduce using rule 6 (maines -> mainf .)


state 51

    (7) maines -> empty .

    $end            reduce using rule 7 (maines -> empty .)


state 52

    (70) mainf -> bloque . SEMICOLON

    SEMICOLON       shift and go to state 69


state 53

    (42) bloque -> LKEY . bloquep
    (43) bloque -> LKEY . bloqueppp
    (44) bloquep -> . estatuto bloquepp
    (47) bloqueppp -> . RKEY
    (48) estatuto -> . asignacion
    (49) estatuto -> . condif
    (50) estatuto -> . condwhile
    (51) estatuto -> . conddowhile
    (52) estatuto -> . escritura
    (53) asignacion -> . ID AEQL exp SEMICOLON
    (59) condif -> . IF LPAR expresion RPAR bloque condifp
    (62) condwhile -> . WHILE LPAR expresion RPAR bloque SEMICOLON
    (63) conddowhile -> . DO bloque WHILE LPAR expresion RPAR SEMICOLON
    (54) escritura -> . PRINT LPAR escriturap

    RKEY            shift and go to state 73
    ID              shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 81
    DO              shift and go to state 82
    PRINT           shift and go to state 83

    bloquep                        shift and go to state 70
    bloqueppp                      shift and go to state 71
    estatuto                       shift and go to state 72
    asignacion                     shift and go to state 74
    condif                         shift and go to state 75
    condwhile                      shift and go to state 76
    conddowhile                    shift and go to state 77
    escritura                      shift and go to state 78

state 54

    (33) funcionf -> VOID ID LPAR . funcionp RPAR bloque SEMICOLON
    (35) funcionp -> . funcionpp
    (36) funcionp -> . empty
    (37) funcionpp -> . tipo ID funcionppp
    (71) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    RPAR            reduce using rule 71 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    funcionp                       shift and go to state 84
    funcionpp                      shift and go to state 85
    empty                          shift and go to state 86
    tipo                           shift and go to state 87

state 55

    (34) funcionf -> tipo ID LPAR . funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (35) funcionp -> . funcionpp
    (36) funcionp -> . empty
    (37) funcionpp -> . tipo ID funcionppp
    (71) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    RPAR            reduce using rule 71 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    tipo                           shift and go to state 87
    funcionp                       shift and go to state 88
    funcionpp                      shift and go to state 85
    empty                          shift and go to state 86

state 56

    (19) array -> LBRK exp RBRK .

    AEQL            reduce using rule 19 (array -> LBRK exp RBRK .)
    COMMA           reduce using rule 19 (array -> LBRK exp RBRK .)
    SEMICOLON       reduce using rule 19 (array -> LBRK exp RBRK .)


state 57

    (20) exp -> termino PLUS . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    termino                        shift and go to state 34
    exp                            shift and go to state 89
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 58

    (21) exp -> termino MINUS . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    termino                        shift and go to state 34
    exp                            shift and go to state 90
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 59

    (22) exp -> termino empty .

    RBRK            reduce using rule 22 (exp -> termino empty .)
    COMMA           reduce using rule 22 (exp -> termino empty .)
    SEMICOLON       reduce using rule 22 (exp -> termino empty .)
    RPAR            reduce using rule 22 (exp -> termino empty .)
    MORETHAN        reduce using rule 22 (exp -> termino empty .)
    LESSTHAN        reduce using rule 22 (exp -> termino empty .)
    EQL             reduce using rule 22 (exp -> termino empty .)
    NOTEQL          reduce using rule 22 (exp -> termino empty .)


state 60

    (27) factor -> PLUS varcte .

    MULT            reduce using rule 27 (factor -> PLUS varcte .)
    SLASH           reduce using rule 27 (factor -> PLUS varcte .)
    PLUS            reduce using rule 27 (factor -> PLUS varcte .)
    MINUS           reduce using rule 27 (factor -> PLUS varcte .)
    RBRK            reduce using rule 27 (factor -> PLUS varcte .)
    COMMA           reduce using rule 27 (factor -> PLUS varcte .)
    SEMICOLON       reduce using rule 27 (factor -> PLUS varcte .)
    RPAR            reduce using rule 27 (factor -> PLUS varcte .)
    MORETHAN        reduce using rule 27 (factor -> PLUS varcte .)
    LESSTHAN        reduce using rule 27 (factor -> PLUS varcte .)
    EQL             reduce using rule 27 (factor -> PLUS varcte .)
    NOTEQL          reduce using rule 27 (factor -> PLUS varcte .)


state 61

    (28) factor -> MINUS varcte .

    MULT            reduce using rule 28 (factor -> MINUS varcte .)
    SLASH           reduce using rule 28 (factor -> MINUS varcte .)
    PLUS            reduce using rule 28 (factor -> MINUS varcte .)
    MINUS           reduce using rule 28 (factor -> MINUS varcte .)
    RBRK            reduce using rule 28 (factor -> MINUS varcte .)
    COMMA           reduce using rule 28 (factor -> MINUS varcte .)
    SEMICOLON       reduce using rule 28 (factor -> MINUS varcte .)
    RPAR            reduce using rule 28 (factor -> MINUS varcte .)
    MORETHAN        reduce using rule 28 (factor -> MINUS varcte .)
    LESSTHAN        reduce using rule 28 (factor -> MINUS varcte .)
    EQL             reduce using rule 28 (factor -> MINUS varcte .)
    NOTEQL          reduce using rule 28 (factor -> MINUS varcte .)


state 62

    (23) termino -> factor MULT . termino
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    factor                         shift and go to state 37
    termino                        shift and go to state 91
    varcte                         shift and go to state 39

state 63

    (24) termino -> factor SLASH . termino
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    factor                         shift and go to state 37
    termino                        shift and go to state 92
    varcte                         shift and go to state 39

state 64

    (25) termino -> factor empty .

    PLUS            reduce using rule 25 (termino -> factor empty .)
    MINUS           reduce using rule 25 (termino -> factor empty .)
    RBRK            reduce using rule 25 (termino -> factor empty .)
    COMMA           reduce using rule 25 (termino -> factor empty .)
    SEMICOLON       reduce using rule 25 (termino -> factor empty .)
    RPAR            reduce using rule 25 (termino -> factor empty .)
    MORETHAN        reduce using rule 25 (termino -> factor empty .)
    LESSTHAN        reduce using rule 25 (termino -> factor empty .)
    EQL             reduce using rule 25 (termino -> factor empty .)
    NOTEQL          reduce using rule 25 (termino -> factor empty .)


state 65

    (26) factor -> LPAR exp . RPAR

    RPAR            shift and go to state 93


state 66

    (11) varpp -> AEQL exp varppp .

    FUNC            reduce using rule 11 (varpp -> AEQL exp varppp .)


state 67

    (14) varppp -> SEMICOLON varpppp empty .

    FUNC            reduce using rule 14 (varppp -> SEMICOLON varpppp empty .)


state 68

    (4) funciones -> funcionf MAIN SEMICOLON maines .

    $end            reduce using rule 4 (funciones -> funcionf MAIN SEMICOLON maines .)


state 69

    (70) mainf -> bloque SEMICOLON .

    $end            reduce using rule 70 (mainf -> bloque SEMICOLON .)


state 70

    (42) bloque -> LKEY bloquep .

    SEMICOLON       reduce using rule 42 (bloque -> LKEY bloquep .)
    WHILE           reduce using rule 42 (bloque -> LKEY bloquep .)
    RETURN          reduce using rule 42 (bloque -> LKEY bloquep .)
    ELSE            reduce using rule 42 (bloque -> LKEY bloquep .)


state 71

    (43) bloque -> LKEY bloqueppp .

    SEMICOLON       reduce using rule 43 (bloque -> LKEY bloqueppp .)
    WHILE           reduce using rule 43 (bloque -> LKEY bloqueppp .)
    RETURN          reduce using rule 43 (bloque -> LKEY bloqueppp .)
    ELSE            reduce using rule 43 (bloque -> LKEY bloqueppp .)


state 72

    (44) bloquep -> estatuto . bloquepp
    (45) bloquepp -> . bloquep
    (46) bloquepp -> . bloqueppp
    (44) bloquep -> . estatuto bloquepp
    (47) bloqueppp -> . RKEY
    (48) estatuto -> . asignacion
    (49) estatuto -> . condif
    (50) estatuto -> . condwhile
    (51) estatuto -> . conddowhile
    (52) estatuto -> . escritura
    (53) asignacion -> . ID AEQL exp SEMICOLON
    (59) condif -> . IF LPAR expresion RPAR bloque condifp
    (62) condwhile -> . WHILE LPAR expresion RPAR bloque SEMICOLON
    (63) conddowhile -> . DO bloque WHILE LPAR expresion RPAR SEMICOLON
    (54) escritura -> . PRINT LPAR escriturap

    RKEY            shift and go to state 73
    ID              shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 81
    DO              shift and go to state 82
    PRINT           shift and go to state 83

    estatuto                       shift and go to state 72
    bloquepp                       shift and go to state 94
    bloquep                        shift and go to state 95
    bloqueppp                      shift and go to state 96
    asignacion                     shift and go to state 74
    condif                         shift and go to state 75
    condwhile                      shift and go to state 76
    conddowhile                    shift and go to state 77
    escritura                      shift and go to state 78

state 73

    (47) bloqueppp -> RKEY .

    SEMICOLON       reduce using rule 47 (bloqueppp -> RKEY .)
    WHILE           reduce using rule 47 (bloqueppp -> RKEY .)
    RETURN          reduce using rule 47 (bloqueppp -> RKEY .)
    ELSE            reduce using rule 47 (bloqueppp -> RKEY .)


state 74

    (48) estatuto -> asignacion .

    RKEY            reduce using rule 48 (estatuto -> asignacion .)
    ID              reduce using rule 48 (estatuto -> asignacion .)
    IF              reduce using rule 48 (estatuto -> asignacion .)
    WHILE           reduce using rule 48 (estatuto -> asignacion .)
    DO              reduce using rule 48 (estatuto -> asignacion .)
    PRINT           reduce using rule 48 (estatuto -> asignacion .)


state 75

    (49) estatuto -> condif .

    RKEY            reduce using rule 49 (estatuto -> condif .)
    ID              reduce using rule 49 (estatuto -> condif .)
    IF              reduce using rule 49 (estatuto -> condif .)
    WHILE           reduce using rule 49 (estatuto -> condif .)
    DO              reduce using rule 49 (estatuto -> condif .)
    PRINT           reduce using rule 49 (estatuto -> condif .)


state 76

    (50) estatuto -> condwhile .

    RKEY            reduce using rule 50 (estatuto -> condwhile .)
    ID              reduce using rule 50 (estatuto -> condwhile .)
    IF              reduce using rule 50 (estatuto -> condwhile .)
    WHILE           reduce using rule 50 (estatuto -> condwhile .)
    DO              reduce using rule 50 (estatuto -> condwhile .)
    PRINT           reduce using rule 50 (estatuto -> condwhile .)


state 77

    (51) estatuto -> conddowhile .

    RKEY            reduce using rule 51 (estatuto -> conddowhile .)
    ID              reduce using rule 51 (estatuto -> conddowhile .)
    IF              reduce using rule 51 (estatuto -> conddowhile .)
    WHILE           reduce using rule 51 (estatuto -> conddowhile .)
    DO              reduce using rule 51 (estatuto -> conddowhile .)
    PRINT           reduce using rule 51 (estatuto -> conddowhile .)


state 78

    (52) estatuto -> escritura .

    RKEY            reduce using rule 52 (estatuto -> escritura .)
    ID              reduce using rule 52 (estatuto -> escritura .)
    IF              reduce using rule 52 (estatuto -> escritura .)
    WHILE           reduce using rule 52 (estatuto -> escritura .)
    DO              reduce using rule 52 (estatuto -> escritura .)
    PRINT           reduce using rule 52 (estatuto -> escritura .)


state 79

    (53) asignacion -> ID . AEQL exp SEMICOLON

    AEQL            shift and go to state 97


state 80

    (59) condif -> IF . LPAR expresion RPAR bloque condifp

    LPAR            shift and go to state 98


state 81

    (62) condwhile -> WHILE . LPAR expresion RPAR bloque SEMICOLON

    LPAR            shift and go to state 99


state 82

    (63) conddowhile -> DO . bloque WHILE LPAR expresion RPAR SEMICOLON
    (42) bloque -> . LKEY bloquep
    (43) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 53

    bloque                         shift and go to state 100

state 83

    (54) escritura -> PRINT . LPAR escriturap

    LPAR            shift and go to state 101


state 84

    (33) funcionf -> VOID ID LPAR funcionp . RPAR bloque SEMICOLON

    RPAR            shift and go to state 102


state 85

    (35) funcionp -> funcionpp .

    RPAR            reduce using rule 35 (funcionp -> funcionpp .)


state 86

    (36) funcionp -> empty .

    RPAR            reduce using rule 36 (funcionp -> empty .)


state 87

    (37) funcionpp -> tipo . ID funcionppp

    ID              shift and go to state 103


state 88

    (34) funcionf -> tipo ID LPAR funcionp . RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp

    RPAR            shift and go to state 104


state 89

    (20) exp -> termino PLUS exp .

    RBRK            reduce using rule 20 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 20 (exp -> termino PLUS exp .)
    SEMICOLON       reduce using rule 20 (exp -> termino PLUS exp .)
    RPAR            reduce using rule 20 (exp -> termino PLUS exp .)
    MORETHAN        reduce using rule 20 (exp -> termino PLUS exp .)
    LESSTHAN        reduce using rule 20 (exp -> termino PLUS exp .)
    EQL             reduce using rule 20 (exp -> termino PLUS exp .)
    NOTEQL          reduce using rule 20 (exp -> termino PLUS exp .)


state 90

    (21) exp -> termino MINUS exp .

    RBRK            reduce using rule 21 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 21 (exp -> termino MINUS exp .)
    SEMICOLON       reduce using rule 21 (exp -> termino MINUS exp .)
    RPAR            reduce using rule 21 (exp -> termino MINUS exp .)
    MORETHAN        reduce using rule 21 (exp -> termino MINUS exp .)
    LESSTHAN        reduce using rule 21 (exp -> termino MINUS exp .)
    EQL             reduce using rule 21 (exp -> termino MINUS exp .)
    NOTEQL          reduce using rule 21 (exp -> termino MINUS exp .)


state 91

    (23) termino -> factor MULT termino .

    PLUS            reduce using rule 23 (termino -> factor MULT termino .)
    MINUS           reduce using rule 23 (termino -> factor MULT termino .)
    RBRK            reduce using rule 23 (termino -> factor MULT termino .)
    COMMA           reduce using rule 23 (termino -> factor MULT termino .)
    SEMICOLON       reduce using rule 23 (termino -> factor MULT termino .)
    RPAR            reduce using rule 23 (termino -> factor MULT termino .)
    MORETHAN        reduce using rule 23 (termino -> factor MULT termino .)
    LESSTHAN        reduce using rule 23 (termino -> factor MULT termino .)
    EQL             reduce using rule 23 (termino -> factor MULT termino .)
    NOTEQL          reduce using rule 23 (termino -> factor MULT termino .)


state 92

    (24) termino -> factor SLASH termino .

    PLUS            reduce using rule 24 (termino -> factor SLASH termino .)
    MINUS           reduce using rule 24 (termino -> factor SLASH termino .)
    RBRK            reduce using rule 24 (termino -> factor SLASH termino .)
    COMMA           reduce using rule 24 (termino -> factor SLASH termino .)
    SEMICOLON       reduce using rule 24 (termino -> factor SLASH termino .)
    RPAR            reduce using rule 24 (termino -> factor SLASH termino .)
    MORETHAN        reduce using rule 24 (termino -> factor SLASH termino .)
    LESSTHAN        reduce using rule 24 (termino -> factor SLASH termino .)
    EQL             reduce using rule 24 (termino -> factor SLASH termino .)
    NOTEQL          reduce using rule 24 (termino -> factor SLASH termino .)


state 93

    (26) factor -> LPAR exp RPAR .

    MULT            reduce using rule 26 (factor -> LPAR exp RPAR .)
    SLASH           reduce using rule 26 (factor -> LPAR exp RPAR .)
    PLUS            reduce using rule 26 (factor -> LPAR exp RPAR .)
    MINUS           reduce using rule 26 (factor -> LPAR exp RPAR .)
    RBRK            reduce using rule 26 (factor -> LPAR exp RPAR .)
    COMMA           reduce using rule 26 (factor -> LPAR exp RPAR .)
    SEMICOLON       reduce using rule 26 (factor -> LPAR exp RPAR .)
    RPAR            reduce using rule 26 (factor -> LPAR exp RPAR .)
    MORETHAN        reduce using rule 26 (factor -> LPAR exp RPAR .)
    LESSTHAN        reduce using rule 26 (factor -> LPAR exp RPAR .)
    EQL             reduce using rule 26 (factor -> LPAR exp RPAR .)
    NOTEQL          reduce using rule 26 (factor -> LPAR exp RPAR .)


state 94

    (44) bloquep -> estatuto bloquepp .

    SEMICOLON       reduce using rule 44 (bloquep -> estatuto bloquepp .)
    WHILE           reduce using rule 44 (bloquep -> estatuto bloquepp .)
    RETURN          reduce using rule 44 (bloquep -> estatuto bloquepp .)
    ELSE            reduce using rule 44 (bloquep -> estatuto bloquepp .)


state 95

    (45) bloquepp -> bloquep .

    SEMICOLON       reduce using rule 45 (bloquepp -> bloquep .)
    WHILE           reduce using rule 45 (bloquepp -> bloquep .)
    RETURN          reduce using rule 45 (bloquepp -> bloquep .)
    ELSE            reduce using rule 45 (bloquepp -> bloquep .)


state 96

    (46) bloquepp -> bloqueppp .

    SEMICOLON       reduce using rule 46 (bloquepp -> bloqueppp .)
    WHILE           reduce using rule 46 (bloquepp -> bloqueppp .)
    RETURN          reduce using rule 46 (bloquepp -> bloqueppp .)
    ELSE            reduce using rule 46 (bloquepp -> bloqueppp .)


state 97

    (53) asignacion -> ID AEQL . exp SEMICOLON
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 105
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 98

    (59) condif -> IF LPAR . expresion RPAR bloque condifp
    (64) expresion -> . exp expresionp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresion                      shift and go to state 106
    exp                            shift and go to state 107
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 99

    (62) condwhile -> WHILE LPAR . expresion RPAR bloque SEMICOLON
    (64) expresion -> . exp expresionp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresion                      shift and go to state 108
    exp                            shift and go to state 107
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 100

    (63) conddowhile -> DO bloque . WHILE LPAR expresion RPAR SEMICOLON

    WHILE           shift and go to state 109


state 101

    (54) escritura -> PRINT LPAR . escriturap
    (55) escriturap -> . exp escriturapp
    (56) escriturap -> . STRING escriturapp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    STRING          shift and go to state 112
    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    escriturap                     shift and go to state 110
    exp                            shift and go to state 111
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 102

    (33) funcionf -> VOID ID LPAR funcionp RPAR . bloque SEMICOLON
    (42) bloque -> . LKEY bloquep
    (43) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 53

    bloque                         shift and go to state 113

state 103

    (37) funcionpp -> tipo ID . funcionppp
    (38) funcionppp -> . COMMA funcionpp
    (39) funcionppp -> . empty
    (71) empty -> .

    COMMA           shift and go to state 115
    RPAR            reduce using rule 71 (empty -> .)

    funcionppp                     shift and go to state 114
    empty                          shift and go to state 116

state 104

    (34) funcionf -> tipo ID LPAR funcionp RPAR . bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (42) bloque -> . LKEY bloquep
    (43) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 53

    bloque                         shift and go to state 117

state 105

    (53) asignacion -> ID AEQL exp . SEMICOLON

    SEMICOLON       shift and go to state 118


state 106

    (59) condif -> IF LPAR expresion . RPAR bloque condifp

    RPAR            shift and go to state 119


state 107

    (64) expresion -> exp . expresionp
    (65) expresionp -> . MORETHAN expresionpp
    (66) expresionp -> . LESSTHAN expresionpp
    (67) expresionp -> . EQL expresionpp
    (68) expresionp -> . NOTEQL expresionpp

    MORETHAN        shift and go to state 121
    LESSTHAN        shift and go to state 122
    EQL             shift and go to state 123
    NOTEQL          shift and go to state 124

    expresionp                     shift and go to state 120

state 108

    (62) condwhile -> WHILE LPAR expresion . RPAR bloque SEMICOLON

    RPAR            shift and go to state 125


state 109

    (63) conddowhile -> DO bloque WHILE . LPAR expresion RPAR SEMICOLON

    LPAR            shift and go to state 126


state 110

    (54) escritura -> PRINT LPAR escriturap .

    RKEY            reduce using rule 54 (escritura -> PRINT LPAR escriturap .)
    ID              reduce using rule 54 (escritura -> PRINT LPAR escriturap .)
    IF              reduce using rule 54 (escritura -> PRINT LPAR escriturap .)
    WHILE           reduce using rule 54 (escritura -> PRINT LPAR escriturap .)
    DO              reduce using rule 54 (escritura -> PRINT LPAR escriturap .)
    PRINT           reduce using rule 54 (escritura -> PRINT LPAR escriturap .)


state 111

    (55) escriturap -> exp . escriturapp
    (57) escriturapp -> . COMMA escriturap
    (58) escriturapp -> . RPAR SEMICOLON

    COMMA           shift and go to state 128
    RPAR            shift and go to state 129

    escriturapp                    shift and go to state 127

state 112

    (56) escriturap -> STRING . escriturapp
    (57) escriturapp -> . COMMA escriturap
    (58) escriturapp -> . RPAR SEMICOLON

    COMMA           shift and go to state 128
    RPAR            shift and go to state 129

    escriturapp                    shift and go to state 130

state 113

    (33) funcionf -> VOID ID LPAR funcionp RPAR bloque . SEMICOLON

    SEMICOLON       shift and go to state 131


state 114

    (37) funcionpp -> tipo ID funcionppp .

    RPAR            reduce using rule 37 (funcionpp -> tipo ID funcionppp .)


state 115

    (38) funcionppp -> COMMA . funcionpp
    (37) funcionpp -> . tipo ID funcionppp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    funcionpp                      shift and go to state 132
    tipo                           shift and go to state 87

state 116

    (39) funcionppp -> empty .

    RPAR            reduce using rule 39 (funcionppp -> empty .)


state 117

    (34) funcionf -> tipo ID LPAR funcionp RPAR bloque . RETURN LPAR exp RPAR SEMICOLON funcionpppp

    RETURN          shift and go to state 133


state 118

    (53) asignacion -> ID AEQL exp SEMICOLON .

    RKEY            reduce using rule 53 (asignacion -> ID AEQL exp SEMICOLON .)
    ID              reduce using rule 53 (asignacion -> ID AEQL exp SEMICOLON .)
    IF              reduce using rule 53 (asignacion -> ID AEQL exp SEMICOLON .)
    WHILE           reduce using rule 53 (asignacion -> ID AEQL exp SEMICOLON .)
    DO              reduce using rule 53 (asignacion -> ID AEQL exp SEMICOLON .)
    PRINT           reduce using rule 53 (asignacion -> ID AEQL exp SEMICOLON .)


state 119

    (59) condif -> IF LPAR expresion RPAR . bloque condifp
    (42) bloque -> . LKEY bloquep
    (43) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 53

    bloque                         shift and go to state 134

state 120

    (64) expresion -> exp expresionp .

    RPAR            reduce using rule 64 (expresion -> exp expresionp .)


state 121

    (65) expresionp -> MORETHAN . expresionpp
    (69) expresionpp -> . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresionpp                    shift and go to state 135
    exp                            shift and go to state 136
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 122

    (66) expresionp -> LESSTHAN . expresionpp
    (69) expresionpp -> . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresionpp                    shift and go to state 137
    exp                            shift and go to state 136
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 123

    (67) expresionp -> EQL . expresionpp
    (69) expresionpp -> . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresionpp                    shift and go to state 138
    exp                            shift and go to state 136
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 124

    (68) expresionp -> NOTEQL . expresionpp
    (69) expresionpp -> . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresionpp                    shift and go to state 139
    exp                            shift and go to state 136
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 125

    (62) condwhile -> WHILE LPAR expresion RPAR . bloque SEMICOLON
    (42) bloque -> . LKEY bloquep
    (43) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 53

    bloque                         shift and go to state 140

state 126

    (63) conddowhile -> DO bloque WHILE LPAR . expresion RPAR SEMICOLON
    (64) expresion -> . exp expresionp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresion                      shift and go to state 141
    exp                            shift and go to state 107
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 127

    (55) escriturap -> exp escriturapp .

    RKEY            reduce using rule 55 (escriturap -> exp escriturapp .)
    ID              reduce using rule 55 (escriturap -> exp escriturapp .)
    IF              reduce using rule 55 (escriturap -> exp escriturapp .)
    WHILE           reduce using rule 55 (escriturap -> exp escriturapp .)
    DO              reduce using rule 55 (escriturap -> exp escriturapp .)
    PRINT           reduce using rule 55 (escriturap -> exp escriturapp .)


state 128

    (57) escriturapp -> COMMA . escriturap
    (55) escriturap -> . exp escriturapp
    (56) escriturap -> . STRING escriturapp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    STRING          shift and go to state 112
    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    escriturap                     shift and go to state 142
    exp                            shift and go to state 111
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 129

    (58) escriturapp -> RPAR . SEMICOLON

    SEMICOLON       shift and go to state 143


state 130

    (56) escriturap -> STRING escriturapp .

    RKEY            reduce using rule 56 (escriturap -> STRING escriturapp .)
    ID              reduce using rule 56 (escriturap -> STRING escriturapp .)
    IF              reduce using rule 56 (escriturap -> STRING escriturapp .)
    WHILE           reduce using rule 56 (escriturap -> STRING escriturapp .)
    DO              reduce using rule 56 (escriturap -> STRING escriturapp .)
    PRINT           reduce using rule 56 (escriturap -> STRING escriturapp .)


state 131

    (33) funcionf -> VOID ID LPAR funcionp RPAR bloque SEMICOLON .

    MAIN            reduce using rule 33 (funcionf -> VOID ID LPAR funcionp RPAR bloque SEMICOLON .)


state 132

    (38) funcionppp -> COMMA funcionpp .

    RPAR            reduce using rule 38 (funcionppp -> COMMA funcionpp .)


state 133

    (34) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN . LPAR exp RPAR SEMICOLON funcionpppp

    LPAR            shift and go to state 144


state 134

    (59) condif -> IF LPAR expresion RPAR bloque . condifp
    (60) condifp -> . ELSE bloque SEMICOLON
    (61) condifp -> . SEMICOLON

    ELSE            shift and go to state 146
    SEMICOLON       shift and go to state 147

    condifp                        shift and go to state 145

state 135

    (65) expresionp -> MORETHAN expresionpp .

    RPAR            reduce using rule 65 (expresionp -> MORETHAN expresionpp .)


state 136

    (69) expresionpp -> exp .

    RPAR            reduce using rule 69 (expresionpp -> exp .)


state 137

    (66) expresionp -> LESSTHAN expresionpp .

    RPAR            reduce using rule 66 (expresionp -> LESSTHAN expresionpp .)


state 138

    (67) expresionp -> EQL expresionpp .

    RPAR            reduce using rule 67 (expresionp -> EQL expresionpp .)


state 139

    (68) expresionp -> NOTEQL expresionpp .

    RPAR            reduce using rule 68 (expresionp -> NOTEQL expresionpp .)


state 140

    (62) condwhile -> WHILE LPAR expresion RPAR bloque . SEMICOLON

    SEMICOLON       shift and go to state 148


state 141

    (63) conddowhile -> DO bloque WHILE LPAR expresion . RPAR SEMICOLON

    RPAR            shift and go to state 149


state 142

    (57) escriturapp -> COMMA escriturap .

    RKEY            reduce using rule 57 (escriturapp -> COMMA escriturap .)
    ID              reduce using rule 57 (escriturapp -> COMMA escriturap .)
    IF              reduce using rule 57 (escriturapp -> COMMA escriturap .)
    WHILE           reduce using rule 57 (escriturapp -> COMMA escriturap .)
    DO              reduce using rule 57 (escriturapp -> COMMA escriturap .)
    PRINT           reduce using rule 57 (escriturapp -> COMMA escriturap .)


state 143

    (58) escriturapp -> RPAR SEMICOLON .

    RKEY            reduce using rule 58 (escriturapp -> RPAR SEMICOLON .)
    ID              reduce using rule 58 (escriturapp -> RPAR SEMICOLON .)
    IF              reduce using rule 58 (escriturapp -> RPAR SEMICOLON .)
    WHILE           reduce using rule 58 (escriturapp -> RPAR SEMICOLON .)
    DO              reduce using rule 58 (escriturapp -> RPAR SEMICOLON .)
    PRINT           reduce using rule 58 (escriturapp -> RPAR SEMICOLON .)


state 144

    (34) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR . exp RPAR SEMICOLON funcionpppp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 150
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39

state 145

    (59) condif -> IF LPAR expresion RPAR bloque condifp .

    RKEY            reduce using rule 59 (condif -> IF LPAR expresion RPAR bloque condifp .)
    ID              reduce using rule 59 (condif -> IF LPAR expresion RPAR bloque condifp .)
    IF              reduce using rule 59 (condif -> IF LPAR expresion RPAR bloque condifp .)
    WHILE           reduce using rule 59 (condif -> IF LPAR expresion RPAR bloque condifp .)
    DO              reduce using rule 59 (condif -> IF LPAR expresion RPAR bloque condifp .)
    PRINT           reduce using rule 59 (condif -> IF LPAR expresion RPAR bloque condifp .)


state 146

    (60) condifp -> ELSE . bloque SEMICOLON
    (42) bloque -> . LKEY bloquep
    (43) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 53

    bloque                         shift and go to state 151

state 147

    (61) condifp -> SEMICOLON .

    RKEY            reduce using rule 61 (condifp -> SEMICOLON .)
    ID              reduce using rule 61 (condifp -> SEMICOLON .)
    IF              reduce using rule 61 (condifp -> SEMICOLON .)
    WHILE           reduce using rule 61 (condifp -> SEMICOLON .)
    DO              reduce using rule 61 (condifp -> SEMICOLON .)
    PRINT           reduce using rule 61 (condifp -> SEMICOLON .)


state 148

    (62) condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .

    RKEY            reduce using rule 62 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    ID              reduce using rule 62 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    IF              reduce using rule 62 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    WHILE           reduce using rule 62 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    DO              reduce using rule 62 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    PRINT           reduce using rule 62 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)


state 149

    (63) conddowhile -> DO bloque WHILE LPAR expresion RPAR . SEMICOLON

    SEMICOLON       shift and go to state 152


state 150

    (34) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp . RPAR SEMICOLON funcionpppp

    RPAR            shift and go to state 153


state 151

    (60) condifp -> ELSE bloque . SEMICOLON

    SEMICOLON       shift and go to state 154


state 152

    (63) conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .

    RKEY            reduce using rule 63 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    ID              reduce using rule 63 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    IF              reduce using rule 63 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    WHILE           reduce using rule 63 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    DO              reduce using rule 63 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    PRINT           reduce using rule 63 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)


state 153

    (34) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR . SEMICOLON funcionpppp

    SEMICOLON       shift and go to state 155


state 154

    (60) condifp -> ELSE bloque SEMICOLON .

    RKEY            reduce using rule 60 (condifp -> ELSE bloque SEMICOLON .)
    ID              reduce using rule 60 (condifp -> ELSE bloque SEMICOLON .)
    IF              reduce using rule 60 (condifp -> ELSE bloque SEMICOLON .)
    WHILE           reduce using rule 60 (condifp -> ELSE bloque SEMICOLON .)
    DO              reduce using rule 60 (condifp -> ELSE bloque SEMICOLON .)
    PRINT           reduce using rule 60 (condifp -> ELSE bloque SEMICOLON .)


state 155

    (34) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON . funcionpppp
    (40) funcionpppp -> . funcionf
    (41) funcionpppp -> . empty
    (33) funcionf -> . VOID ID LPAR funcionp RPAR bloque SEMICOLON
    (34) funcionf -> . tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (71) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    VOID            shift and go to state 18
    MAIN            reduce using rule 71 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    tipo                           shift and go to state 19
    funcionpppp                    shift and go to state 156
    funcionf                       shift and go to state 157
    empty                          shift and go to state 158

state 156

    (34) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp .

    MAIN            reduce using rule 34 (funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp .)


state 157

    (40) funcionpppp -> funcionf .

    MAIN            reduce using rule 40 (funcionpppp -> funcionf .)


state 158

    (41) funcionpppp -> empty .

    MAIN            reduce using rule 41 (funcionpppp -> empty .)

