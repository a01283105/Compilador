Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> VAR SEMICOLON variable
Rule 2     variable -> varf FUNC SEMICOLON funciones
Rule 3     variable -> FUNC SEMICOLON funciones
Rule 4     funciones -> funcionf MAIN SEMICOLON maines
Rule 5     funciones -> MAIN SEMICOLON maines
Rule 6     maines -> mainf
Rule 7     maines -> empty
Rule 8     varf -> tipo varp
Rule 9     varp -> ID array varpp
Rule 10    varp -> ID varpp
Rule 11    varpp -> AEQL exp varppp
Rule 12    varpp -> varppp
Rule 13    varppp -> COMMA varp
Rule 14    varppp -> SEMICOLON varpppp empty
Rule 15    varpppp -> varf
Rule 16    varpppp -> empty
Rule 17    tipo -> INT
Rule 18    tipo -> FLOAT
Rule 19    array -> LBRK exp RBRK
Rule 20    exp -> termino PLUS exp
Rule 21    exp -> termino MINUS exp
Rule 22    exp -> termino empty
Rule 23    termino -> factor MULT termino
Rule 24    termino -> factor SLASH termino
Rule 25    termino -> factor empty
Rule 26    factor -> LPAR exp RPAR
Rule 27    factor -> PLUS varcte
Rule 28    factor -> MINUS varcte
Rule 29    factor -> varcte
Rule 30    varcte -> ID
Rule 31    varcte -> NUMFLOAT
Rule 32    varcte -> NUMINT
Rule 33    varcte -> llamafunc
Rule 34    llamafunc -> ID LPAR llamafuncp
Rule 35    llamafuncp -> llamafuncpp
Rule 36    llamafuncp -> llamafuncpppp
Rule 37    llamafuncpp -> tipo ID llamafuncppp
Rule 38    llamafuncppp -> COMMA llamafuncpp
Rule 39    llamafuncppp -> llamafuncpppp
Rule 40    llamafuncpppp -> RPAR
Rule 41    funcionf -> VOID ID LPAR funcionp RPAR bloque SEMICOLON
Rule 42    funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
Rule 43    funcionp -> funcionpp
Rule 44    funcionp -> empty
Rule 45    funcionpp -> tipo ID funcionppp
Rule 46    funcionppp -> COMMA funcionpp
Rule 47    funcionppp -> empty
Rule 48    funcionpppp -> funcionf
Rule 49    funcionpppp -> empty
Rule 50    bloque -> LKEY bloquep
Rule 51    bloque -> LKEY bloqueppp
Rule 52    bloquep -> estatuto bloquepp
Rule 53    bloquepp -> bloquep
Rule 54    bloquepp -> bloqueppp
Rule 55    bloqueppp -> RKEY
Rule 56    estatuto -> asignacion
Rule 57    estatuto -> condif
Rule 58    estatuto -> condwhile
Rule 59    estatuto -> conddowhile
Rule 60    estatuto -> escritura
Rule 61    estatuto -> llamafunc SEMICOLON
Rule 62    asignacion -> ID array asignacionp
Rule 63    asignacion -> ID asignacionp
Rule 64    asignacionp -> AEQL exp SEMICOLON
Rule 65    escritura -> PRINT LPAR escriturap
Rule 66    escriturap -> exp escriturapp
Rule 67    escriturap -> STRING escriturapp
Rule 68    escriturapp -> COMMA escriturap
Rule 69    escriturapp -> RPAR SEMICOLON
Rule 70    condif -> IF LPAR expresion RPAR bloque condifp
Rule 71    condifp -> ELSE bloque SEMICOLON
Rule 72    condifp -> SEMICOLON
Rule 73    condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON
Rule 74    conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON
Rule 75    expresion -> exp expresionp
Rule 76    expresionp -> MORETHAN expresionpp
Rule 77    expresionp -> LESSTHAN expresionpp
Rule 78    expresionp -> EQL expresionpp
Rule 79    expresionp -> NOTEQL expresionpp
Rule 80    expresionpp -> exp
Rule 81    mainf -> bloque SEMICOLON
Rule 82    empty -> <empty>

Terminals, with rules where they appear

AEQL                 : 11 64
COMMA                : 13 38 46 68
DO                   : 74
ELSE                 : 71
EQL                  : 78
FLOAT                : 18
FUNC                 : 2 3
ID                   : 9 10 30 34 37 41 42 45 62 63
IF                   : 70
INT                  : 17
LBRK                 : 19
LESSTHAN             : 77
LKEY                 : 50 51
LPAR                 : 26 34 41 42 42 65 70 73 74
MAIN                 : 4 5
MINUS                : 21 28
MORETHAN             : 76
MULT                 : 23
NOTEQL               : 79
NUMFLOAT             : 31
NUMINT               : 32
PLUS                 : 20 27
PRINT                : 65
RBRK                 : 19
RETURN               : 42
RKEY                 : 55
RPAR                 : 26 40 41 42 42 69 70 73 74
SEMICOLON            : 1 2 3 4 5 14 41 42 61 64 69 71 72 73 74 81
SLASH                : 24
STRING               : 67
VAR                  : 1
VOID                 : 41
WHILE                : 73 74
error                : 

Nonterminals, with rules where they appear

array                : 9 62
asignacion           : 56
asignacionp          : 62 63
bloque               : 41 42 70 71 73 74 81
bloquep              : 50 53
bloquepp             : 52
bloqueppp            : 51 54
conddowhile          : 59
condif               : 57
condifp              : 70
condwhile            : 58
empty                : 7 14 16 22 25 44 47 49
escritura            : 60
escriturap           : 65 68
escriturapp          : 66 67
estatuto             : 52
exp                  : 11 19 20 21 26 42 64 66 75 80
expresion            : 70 73 74
expresionp           : 75
expresionpp          : 76 77 78 79
factor               : 23 24 25
funciones            : 2 3
funcionf             : 4 48
funcionp             : 41 42
funcionpp            : 43 46
funcionppp           : 45
funcionpppp          : 42
llamafunc            : 33 61
llamafuncp           : 34
llamafuncpp          : 35 38
llamafuncppp         : 37
llamafuncpppp        : 36 39
maines               : 4 5
mainf                : 6
programa             : 0
termino              : 20 21 22 23 24
tipo                 : 8 37 42 45
varcte               : 27 28 29
varf                 : 2 15
variable             : 1
varp                 : 8 13
varpp                : 9 10
varppp               : 11 12
varpppp              : 14

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . VAR SEMICOLON variable

    VAR             shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> VAR . SEMICOLON variable

    SEMICOLON       shift and go to state 3


state 3

    (1) programa -> VAR SEMICOLON . variable
    (2) variable -> . varf FUNC SEMICOLON funciones
    (3) variable -> . FUNC SEMICOLON funciones
    (8) varf -> . tipo varp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    FUNC            shift and go to state 6
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    variable                       shift and go to state 4
    varf                           shift and go to state 5
    tipo                           shift and go to state 7

state 4

    (1) programa -> VAR SEMICOLON variable .

    $end            reduce using rule 1 (programa -> VAR SEMICOLON variable .)


state 5

    (2) variable -> varf . FUNC SEMICOLON funciones

    FUNC            shift and go to state 10


state 6

    (3) variable -> FUNC . SEMICOLON funciones

    SEMICOLON       shift and go to state 11


state 7

    (8) varf -> tipo . varp
    (9) varp -> . ID array varpp
    (10) varp -> . ID varpp

    ID              shift and go to state 13

    varp                           shift and go to state 12

state 8

    (17) tipo -> INT .

    ID              reduce using rule 17 (tipo -> INT .)


state 9

    (18) tipo -> FLOAT .

    ID              reduce using rule 18 (tipo -> FLOAT .)


state 10

    (2) variable -> varf FUNC . SEMICOLON funciones

    SEMICOLON       shift and go to state 14


state 11

    (3) variable -> FUNC SEMICOLON . funciones
    (4) funciones -> . funcionf MAIN SEMICOLON maines
    (5) funciones -> . MAIN SEMICOLON maines
    (41) funcionf -> . VOID ID LPAR funcionp RPAR bloque SEMICOLON
    (42) funcionf -> . tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    MAIN            shift and go to state 17
    VOID            shift and go to state 18
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    funciones                      shift and go to state 15
    funcionf                       shift and go to state 16
    tipo                           shift and go to state 19

state 12

    (8) varf -> tipo varp .

    FUNC            reduce using rule 8 (varf -> tipo varp .)


state 13

    (9) varp -> ID . array varpp
    (10) varp -> ID . varpp
    (19) array -> . LBRK exp RBRK
    (11) varpp -> . AEQL exp varppp
    (12) varpp -> . varppp
    (13) varppp -> . COMMA varp
    (14) varppp -> . SEMICOLON varpppp empty

    LBRK            shift and go to state 22
    AEQL            shift and go to state 23
    COMMA           shift and go to state 25
    SEMICOLON       shift and go to state 26

    array                          shift and go to state 20
    varpp                          shift and go to state 21
    varppp                         shift and go to state 24

state 14

    (2) variable -> varf FUNC SEMICOLON . funciones
    (4) funciones -> . funcionf MAIN SEMICOLON maines
    (5) funciones -> . MAIN SEMICOLON maines
    (41) funcionf -> . VOID ID LPAR funcionp RPAR bloque SEMICOLON
    (42) funcionf -> . tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    MAIN            shift and go to state 17
    VOID            shift and go to state 18
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    funciones                      shift and go to state 27
    funcionf                       shift and go to state 16
    tipo                           shift and go to state 19

state 15

    (3) variable -> FUNC SEMICOLON funciones .

    $end            reduce using rule 3 (variable -> FUNC SEMICOLON funciones .)


state 16

    (4) funciones -> funcionf . MAIN SEMICOLON maines

    MAIN            shift and go to state 28


state 17

    (5) funciones -> MAIN . SEMICOLON maines

    SEMICOLON       shift and go to state 29


state 18

    (41) funcionf -> VOID . ID LPAR funcionp RPAR bloque SEMICOLON

    ID              shift and go to state 30


state 19

    (42) funcionf -> tipo . ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp

    ID              shift and go to state 31


state 20

    (9) varp -> ID array . varpp
    (11) varpp -> . AEQL exp varppp
    (12) varpp -> . varppp
    (13) varppp -> . COMMA varp
    (14) varppp -> . SEMICOLON varpppp empty

    AEQL            shift and go to state 23
    COMMA           shift and go to state 25
    SEMICOLON       shift and go to state 26

    varpp                          shift and go to state 32
    varppp                         shift and go to state 24

state 21

    (10) varp -> ID varpp .

    FUNC            reduce using rule 10 (varp -> ID varpp .)


state 22

    (19) array -> LBRK . exp RBRK
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 33
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 23

    (11) varpp -> AEQL . exp varppp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 44
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 24

    (12) varpp -> varppp .

    FUNC            reduce using rule 12 (varpp -> varppp .)


state 25

    (13) varppp -> COMMA . varp
    (9) varp -> . ID array varpp
    (10) varp -> . ID varpp

    ID              shift and go to state 13

    varp                           shift and go to state 45

state 26

    (14) varppp -> SEMICOLON . varpppp empty
    (15) varpppp -> . varf
    (16) varpppp -> . empty
    (8) varf -> . tipo varp
    (82) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    FUNC            reduce using rule 82 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    varpppp                        shift and go to state 46
    empty                          shift and go to state 47
    varf                           shift and go to state 48
    tipo                           shift and go to state 7

state 27

    (2) variable -> varf FUNC SEMICOLON funciones .

    $end            reduce using rule 2 (variable -> varf FUNC SEMICOLON funciones .)


state 28

    (4) funciones -> funcionf MAIN . SEMICOLON maines

    SEMICOLON       shift and go to state 49


state 29

    (5) funciones -> MAIN SEMICOLON . maines
    (6) maines -> . mainf
    (7) maines -> . empty
    (81) mainf -> . bloque SEMICOLON
    (82) empty -> .
    (50) bloque -> . LKEY bloquep
    (51) bloque -> . LKEY bloqueppp

    $end            reduce using rule 82 (empty -> .)
    LKEY            shift and go to state 54

    maines                         shift and go to state 50
    mainf                          shift and go to state 51
    empty                          shift and go to state 52
    bloque                         shift and go to state 53

state 30

    (41) funcionf -> VOID ID . LPAR funcionp RPAR bloque SEMICOLON

    LPAR            shift and go to state 55


state 31

    (42) funcionf -> tipo ID . LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp

    LPAR            shift and go to state 56


state 32

    (9) varp -> ID array varpp .

    FUNC            reduce using rule 9 (varp -> ID array varpp .)


state 33

    (19) array -> LBRK exp . RBRK

    RBRK            shift and go to state 57


state 34

    (20) exp -> termino . PLUS exp
    (21) exp -> termino . MINUS exp
    (22) exp -> termino . empty
    (82) empty -> .

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    RBRK            reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)
    RPAR            reduce using rule 82 (empty -> .)
    MORETHAN        reduce using rule 82 (empty -> .)
    LESSTHAN        reduce using rule 82 (empty -> .)
    EQL             reduce using rule 82 (empty -> .)
    NOTEQL          reduce using rule 82 (empty -> .)

    empty                          shift and go to state 60

state 35

    (27) factor -> PLUS . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    varcte                         shift and go to state 61
    llamafunc                      shift and go to state 43

state 36

    (28) factor -> MINUS . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    varcte                         shift and go to state 62
    llamafunc                      shift and go to state 43

state 37

    (23) termino -> factor . MULT termino
    (24) termino -> factor . SLASH termino
    (25) termino -> factor . empty
    (82) empty -> .

    MULT            shift and go to state 63
    SLASH           shift and go to state 64
    PLUS            reduce using rule 82 (empty -> .)
    MINUS           reduce using rule 82 (empty -> .)
    RBRK            reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)
    SEMICOLON       reduce using rule 82 (empty -> .)
    RPAR            reduce using rule 82 (empty -> .)
    MORETHAN        reduce using rule 82 (empty -> .)
    LESSTHAN        reduce using rule 82 (empty -> .)
    EQL             reduce using rule 82 (empty -> .)
    NOTEQL          reduce using rule 82 (empty -> .)

    empty                          shift and go to state 65

state 38

    (26) factor -> LPAR . exp RPAR
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 66
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 39

    (29) factor -> varcte .

    MULT            reduce using rule 29 (factor -> varcte .)
    SLASH           reduce using rule 29 (factor -> varcte .)
    PLUS            reduce using rule 29 (factor -> varcte .)
    MINUS           reduce using rule 29 (factor -> varcte .)
    RBRK            reduce using rule 29 (factor -> varcte .)
    COMMA           reduce using rule 29 (factor -> varcte .)
    SEMICOLON       reduce using rule 29 (factor -> varcte .)
    RPAR            reduce using rule 29 (factor -> varcte .)
    MORETHAN        reduce using rule 29 (factor -> varcte .)
    LESSTHAN        reduce using rule 29 (factor -> varcte .)
    EQL             reduce using rule 29 (factor -> varcte .)
    NOTEQL          reduce using rule 29 (factor -> varcte .)


state 40

    (30) varcte -> ID .
    (34) llamafunc -> ID . LPAR llamafuncp

    MULT            reduce using rule 30 (varcte -> ID .)
    SLASH           reduce using rule 30 (varcte -> ID .)
    PLUS            reduce using rule 30 (varcte -> ID .)
    MINUS           reduce using rule 30 (varcte -> ID .)
    RBRK            reduce using rule 30 (varcte -> ID .)
    COMMA           reduce using rule 30 (varcte -> ID .)
    SEMICOLON       reduce using rule 30 (varcte -> ID .)
    RPAR            reduce using rule 30 (varcte -> ID .)
    MORETHAN        reduce using rule 30 (varcte -> ID .)
    LESSTHAN        reduce using rule 30 (varcte -> ID .)
    EQL             reduce using rule 30 (varcte -> ID .)
    NOTEQL          reduce using rule 30 (varcte -> ID .)
    LPAR            shift and go to state 67


state 41

    (31) varcte -> NUMFLOAT .

    MULT            reduce using rule 31 (varcte -> NUMFLOAT .)
    SLASH           reduce using rule 31 (varcte -> NUMFLOAT .)
    PLUS            reduce using rule 31 (varcte -> NUMFLOAT .)
    MINUS           reduce using rule 31 (varcte -> NUMFLOAT .)
    RBRK            reduce using rule 31 (varcte -> NUMFLOAT .)
    COMMA           reduce using rule 31 (varcte -> NUMFLOAT .)
    SEMICOLON       reduce using rule 31 (varcte -> NUMFLOAT .)
    RPAR            reduce using rule 31 (varcte -> NUMFLOAT .)
    MORETHAN        reduce using rule 31 (varcte -> NUMFLOAT .)
    LESSTHAN        reduce using rule 31 (varcte -> NUMFLOAT .)
    EQL             reduce using rule 31 (varcte -> NUMFLOAT .)
    NOTEQL          reduce using rule 31 (varcte -> NUMFLOAT .)


state 42

    (32) varcte -> NUMINT .

    MULT            reduce using rule 32 (varcte -> NUMINT .)
    SLASH           reduce using rule 32 (varcte -> NUMINT .)
    PLUS            reduce using rule 32 (varcte -> NUMINT .)
    MINUS           reduce using rule 32 (varcte -> NUMINT .)
    RBRK            reduce using rule 32 (varcte -> NUMINT .)
    COMMA           reduce using rule 32 (varcte -> NUMINT .)
    SEMICOLON       reduce using rule 32 (varcte -> NUMINT .)
    RPAR            reduce using rule 32 (varcte -> NUMINT .)
    MORETHAN        reduce using rule 32 (varcte -> NUMINT .)
    LESSTHAN        reduce using rule 32 (varcte -> NUMINT .)
    EQL             reduce using rule 32 (varcte -> NUMINT .)
    NOTEQL          reduce using rule 32 (varcte -> NUMINT .)


state 43

    (33) varcte -> llamafunc .

    MULT            reduce using rule 33 (varcte -> llamafunc .)
    SLASH           reduce using rule 33 (varcte -> llamafunc .)
    PLUS            reduce using rule 33 (varcte -> llamafunc .)
    MINUS           reduce using rule 33 (varcte -> llamafunc .)
    RBRK            reduce using rule 33 (varcte -> llamafunc .)
    COMMA           reduce using rule 33 (varcte -> llamafunc .)
    SEMICOLON       reduce using rule 33 (varcte -> llamafunc .)
    RPAR            reduce using rule 33 (varcte -> llamafunc .)
    MORETHAN        reduce using rule 33 (varcte -> llamafunc .)
    LESSTHAN        reduce using rule 33 (varcte -> llamafunc .)
    EQL             reduce using rule 33 (varcte -> llamafunc .)
    NOTEQL          reduce using rule 33 (varcte -> llamafunc .)


state 44

    (11) varpp -> AEQL exp . varppp
    (13) varppp -> . COMMA varp
    (14) varppp -> . SEMICOLON varpppp empty

    COMMA           shift and go to state 25
    SEMICOLON       shift and go to state 26

    varppp                         shift and go to state 68

state 45

    (13) varppp -> COMMA varp .

    FUNC            reduce using rule 13 (varppp -> COMMA varp .)


state 46

    (14) varppp -> SEMICOLON varpppp . empty
    (82) empty -> .

    FUNC            reduce using rule 82 (empty -> .)

    empty                          shift and go to state 69

state 47

    (16) varpppp -> empty .

    FUNC            reduce using rule 16 (varpppp -> empty .)


state 48

    (15) varpppp -> varf .

    FUNC            reduce using rule 15 (varpppp -> varf .)


state 49

    (4) funciones -> funcionf MAIN SEMICOLON . maines
    (6) maines -> . mainf
    (7) maines -> . empty
    (81) mainf -> . bloque SEMICOLON
    (82) empty -> .
    (50) bloque -> . LKEY bloquep
    (51) bloque -> . LKEY bloqueppp

    $end            reduce using rule 82 (empty -> .)
    LKEY            shift and go to state 54

    maines                         shift and go to state 70
    mainf                          shift and go to state 51
    empty                          shift and go to state 52
    bloque                         shift and go to state 53

state 50

    (5) funciones -> MAIN SEMICOLON maines .

    $end            reduce using rule 5 (funciones -> MAIN SEMICOLON maines .)


state 51

    (6) maines -> mainf .

    $end            reduce using rule 6 (maines -> mainf .)


state 52

    (7) maines -> empty .

    $end            reduce using rule 7 (maines -> empty .)


state 53

    (81) mainf -> bloque . SEMICOLON

    SEMICOLON       shift and go to state 71


state 54

    (50) bloque -> LKEY . bloquep
    (51) bloque -> LKEY . bloqueppp
    (52) bloquep -> . estatuto bloquepp
    (55) bloqueppp -> . RKEY
    (56) estatuto -> . asignacion
    (57) estatuto -> . condif
    (58) estatuto -> . condwhile
    (59) estatuto -> . conddowhile
    (60) estatuto -> . escritura
    (61) estatuto -> . llamafunc SEMICOLON
    (62) asignacion -> . ID array asignacionp
    (63) asignacion -> . ID asignacionp
    (70) condif -> . IF LPAR expresion RPAR bloque condifp
    (73) condwhile -> . WHILE LPAR expresion RPAR bloque SEMICOLON
    (74) conddowhile -> . DO bloque WHILE LPAR expresion RPAR SEMICOLON
    (65) escritura -> . PRINT LPAR escriturap
    (34) llamafunc -> . ID LPAR llamafuncp

    RKEY            shift and go to state 75
    ID              shift and go to state 82
    IF              shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    PRINT           shift and go to state 86

    bloquep                        shift and go to state 72
    bloqueppp                      shift and go to state 73
    estatuto                       shift and go to state 74
    asignacion                     shift and go to state 76
    condif                         shift and go to state 77
    condwhile                      shift and go to state 78
    conddowhile                    shift and go to state 79
    escritura                      shift and go to state 80
    llamafunc                      shift and go to state 81

state 55

    (41) funcionf -> VOID ID LPAR . funcionp RPAR bloque SEMICOLON
    (43) funcionp -> . funcionpp
    (44) funcionp -> . empty
    (45) funcionpp -> . tipo ID funcionppp
    (82) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    RPAR            reduce using rule 82 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    funcionp                       shift and go to state 87
    funcionpp                      shift and go to state 88
    empty                          shift and go to state 89
    tipo                           shift and go to state 90

state 56

    (42) funcionf -> tipo ID LPAR . funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (43) funcionp -> . funcionpp
    (44) funcionp -> . empty
    (45) funcionpp -> . tipo ID funcionppp
    (82) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    RPAR            reduce using rule 82 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    tipo                           shift and go to state 90
    funcionp                       shift and go to state 91
    funcionpp                      shift and go to state 88
    empty                          shift and go to state 89

state 57

    (19) array -> LBRK exp RBRK .

    AEQL            reduce using rule 19 (array -> LBRK exp RBRK .)
    COMMA           reduce using rule 19 (array -> LBRK exp RBRK .)
    SEMICOLON       reduce using rule 19 (array -> LBRK exp RBRK .)


state 58

    (20) exp -> termino PLUS . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    termino                        shift and go to state 34
    exp                            shift and go to state 92
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 59

    (21) exp -> termino MINUS . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    termino                        shift and go to state 34
    exp                            shift and go to state 93
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 60

    (22) exp -> termino empty .

    RBRK            reduce using rule 22 (exp -> termino empty .)
    COMMA           reduce using rule 22 (exp -> termino empty .)
    SEMICOLON       reduce using rule 22 (exp -> termino empty .)
    RPAR            reduce using rule 22 (exp -> termino empty .)
    MORETHAN        reduce using rule 22 (exp -> termino empty .)
    LESSTHAN        reduce using rule 22 (exp -> termino empty .)
    EQL             reduce using rule 22 (exp -> termino empty .)
    NOTEQL          reduce using rule 22 (exp -> termino empty .)


state 61

    (27) factor -> PLUS varcte .

    MULT            reduce using rule 27 (factor -> PLUS varcte .)
    SLASH           reduce using rule 27 (factor -> PLUS varcte .)
    PLUS            reduce using rule 27 (factor -> PLUS varcte .)
    MINUS           reduce using rule 27 (factor -> PLUS varcte .)
    RBRK            reduce using rule 27 (factor -> PLUS varcte .)
    COMMA           reduce using rule 27 (factor -> PLUS varcte .)
    SEMICOLON       reduce using rule 27 (factor -> PLUS varcte .)
    RPAR            reduce using rule 27 (factor -> PLUS varcte .)
    MORETHAN        reduce using rule 27 (factor -> PLUS varcte .)
    LESSTHAN        reduce using rule 27 (factor -> PLUS varcte .)
    EQL             reduce using rule 27 (factor -> PLUS varcte .)
    NOTEQL          reduce using rule 27 (factor -> PLUS varcte .)


state 62

    (28) factor -> MINUS varcte .

    MULT            reduce using rule 28 (factor -> MINUS varcte .)
    SLASH           reduce using rule 28 (factor -> MINUS varcte .)
    PLUS            reduce using rule 28 (factor -> MINUS varcte .)
    MINUS           reduce using rule 28 (factor -> MINUS varcte .)
    RBRK            reduce using rule 28 (factor -> MINUS varcte .)
    COMMA           reduce using rule 28 (factor -> MINUS varcte .)
    SEMICOLON       reduce using rule 28 (factor -> MINUS varcte .)
    RPAR            reduce using rule 28 (factor -> MINUS varcte .)
    MORETHAN        reduce using rule 28 (factor -> MINUS varcte .)
    LESSTHAN        reduce using rule 28 (factor -> MINUS varcte .)
    EQL             reduce using rule 28 (factor -> MINUS varcte .)
    NOTEQL          reduce using rule 28 (factor -> MINUS varcte .)


state 63

    (23) termino -> factor MULT . termino
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    factor                         shift and go to state 37
    termino                        shift and go to state 94
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 64

    (24) termino -> factor SLASH . termino
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    factor                         shift and go to state 37
    termino                        shift and go to state 95
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 65

    (25) termino -> factor empty .

    PLUS            reduce using rule 25 (termino -> factor empty .)
    MINUS           reduce using rule 25 (termino -> factor empty .)
    RBRK            reduce using rule 25 (termino -> factor empty .)
    COMMA           reduce using rule 25 (termino -> factor empty .)
    SEMICOLON       reduce using rule 25 (termino -> factor empty .)
    RPAR            reduce using rule 25 (termino -> factor empty .)
    MORETHAN        reduce using rule 25 (termino -> factor empty .)
    LESSTHAN        reduce using rule 25 (termino -> factor empty .)
    EQL             reduce using rule 25 (termino -> factor empty .)
    NOTEQL          reduce using rule 25 (termino -> factor empty .)


state 66

    (26) factor -> LPAR exp . RPAR

    RPAR            shift and go to state 96


state 67

    (34) llamafunc -> ID LPAR . llamafuncp
    (35) llamafuncp -> . llamafuncpp
    (36) llamafuncp -> . llamafuncpppp
    (37) llamafuncpp -> . tipo ID llamafuncppp
    (40) llamafuncpppp -> . RPAR
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    RPAR            shift and go to state 101
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    llamafuncp                     shift and go to state 97
    llamafuncpp                    shift and go to state 98
    llamafuncpppp                  shift and go to state 99
    tipo                           shift and go to state 100

state 68

    (11) varpp -> AEQL exp varppp .

    FUNC            reduce using rule 11 (varpp -> AEQL exp varppp .)


state 69

    (14) varppp -> SEMICOLON varpppp empty .

    FUNC            reduce using rule 14 (varppp -> SEMICOLON varpppp empty .)


state 70

    (4) funciones -> funcionf MAIN SEMICOLON maines .

    $end            reduce using rule 4 (funciones -> funcionf MAIN SEMICOLON maines .)


state 71

    (81) mainf -> bloque SEMICOLON .

    $end            reduce using rule 81 (mainf -> bloque SEMICOLON .)


state 72

    (50) bloque -> LKEY bloquep .

    SEMICOLON       reduce using rule 50 (bloque -> LKEY bloquep .)
    WHILE           reduce using rule 50 (bloque -> LKEY bloquep .)
    RETURN          reduce using rule 50 (bloque -> LKEY bloquep .)
    ELSE            reduce using rule 50 (bloque -> LKEY bloquep .)


state 73

    (51) bloque -> LKEY bloqueppp .

    SEMICOLON       reduce using rule 51 (bloque -> LKEY bloqueppp .)
    WHILE           reduce using rule 51 (bloque -> LKEY bloqueppp .)
    RETURN          reduce using rule 51 (bloque -> LKEY bloqueppp .)
    ELSE            reduce using rule 51 (bloque -> LKEY bloqueppp .)


state 74

    (52) bloquep -> estatuto . bloquepp
    (53) bloquepp -> . bloquep
    (54) bloquepp -> . bloqueppp
    (52) bloquep -> . estatuto bloquepp
    (55) bloqueppp -> . RKEY
    (56) estatuto -> . asignacion
    (57) estatuto -> . condif
    (58) estatuto -> . condwhile
    (59) estatuto -> . conddowhile
    (60) estatuto -> . escritura
    (61) estatuto -> . llamafunc SEMICOLON
    (62) asignacion -> . ID array asignacionp
    (63) asignacion -> . ID asignacionp
    (70) condif -> . IF LPAR expresion RPAR bloque condifp
    (73) condwhile -> . WHILE LPAR expresion RPAR bloque SEMICOLON
    (74) conddowhile -> . DO bloque WHILE LPAR expresion RPAR SEMICOLON
    (65) escritura -> . PRINT LPAR escriturap
    (34) llamafunc -> . ID LPAR llamafuncp

    RKEY            shift and go to state 75
    ID              shift and go to state 82
    IF              shift and go to state 83
    WHILE           shift and go to state 84
    DO              shift and go to state 85
    PRINT           shift and go to state 86

    estatuto                       shift and go to state 74
    bloquepp                       shift and go to state 102
    bloquep                        shift and go to state 103
    bloqueppp                      shift and go to state 104
    asignacion                     shift and go to state 76
    condif                         shift and go to state 77
    condwhile                      shift and go to state 78
    conddowhile                    shift and go to state 79
    escritura                      shift and go to state 80
    llamafunc                      shift and go to state 81

state 75

    (55) bloqueppp -> RKEY .

    SEMICOLON       reduce using rule 55 (bloqueppp -> RKEY .)
    WHILE           reduce using rule 55 (bloqueppp -> RKEY .)
    RETURN          reduce using rule 55 (bloqueppp -> RKEY .)
    ELSE            reduce using rule 55 (bloqueppp -> RKEY .)


state 76

    (56) estatuto -> asignacion .

    RKEY            reduce using rule 56 (estatuto -> asignacion .)
    ID              reduce using rule 56 (estatuto -> asignacion .)
    IF              reduce using rule 56 (estatuto -> asignacion .)
    WHILE           reduce using rule 56 (estatuto -> asignacion .)
    DO              reduce using rule 56 (estatuto -> asignacion .)
    PRINT           reduce using rule 56 (estatuto -> asignacion .)


state 77

    (57) estatuto -> condif .

    RKEY            reduce using rule 57 (estatuto -> condif .)
    ID              reduce using rule 57 (estatuto -> condif .)
    IF              reduce using rule 57 (estatuto -> condif .)
    WHILE           reduce using rule 57 (estatuto -> condif .)
    DO              reduce using rule 57 (estatuto -> condif .)
    PRINT           reduce using rule 57 (estatuto -> condif .)


state 78

    (58) estatuto -> condwhile .

    RKEY            reduce using rule 58 (estatuto -> condwhile .)
    ID              reduce using rule 58 (estatuto -> condwhile .)
    IF              reduce using rule 58 (estatuto -> condwhile .)
    WHILE           reduce using rule 58 (estatuto -> condwhile .)
    DO              reduce using rule 58 (estatuto -> condwhile .)
    PRINT           reduce using rule 58 (estatuto -> condwhile .)


state 79

    (59) estatuto -> conddowhile .

    RKEY            reduce using rule 59 (estatuto -> conddowhile .)
    ID              reduce using rule 59 (estatuto -> conddowhile .)
    IF              reduce using rule 59 (estatuto -> conddowhile .)
    WHILE           reduce using rule 59 (estatuto -> conddowhile .)
    DO              reduce using rule 59 (estatuto -> conddowhile .)
    PRINT           reduce using rule 59 (estatuto -> conddowhile .)


state 80

    (60) estatuto -> escritura .

    RKEY            reduce using rule 60 (estatuto -> escritura .)
    ID              reduce using rule 60 (estatuto -> escritura .)
    IF              reduce using rule 60 (estatuto -> escritura .)
    WHILE           reduce using rule 60 (estatuto -> escritura .)
    DO              reduce using rule 60 (estatuto -> escritura .)
    PRINT           reduce using rule 60 (estatuto -> escritura .)


state 81

    (61) estatuto -> llamafunc . SEMICOLON

    SEMICOLON       shift and go to state 105


state 82

    (62) asignacion -> ID . array asignacionp
    (63) asignacion -> ID . asignacionp
    (34) llamafunc -> ID . LPAR llamafuncp
    (19) array -> . LBRK exp RBRK
    (64) asignacionp -> . AEQL exp SEMICOLON

    LPAR            shift and go to state 67
    LBRK            shift and go to state 22
    AEQL            shift and go to state 108

    array                          shift and go to state 106
    asignacionp                    shift and go to state 107

state 83

    (70) condif -> IF . LPAR expresion RPAR bloque condifp

    LPAR            shift and go to state 109


state 84

    (73) condwhile -> WHILE . LPAR expresion RPAR bloque SEMICOLON

    LPAR            shift and go to state 110


state 85

    (74) conddowhile -> DO . bloque WHILE LPAR expresion RPAR SEMICOLON
    (50) bloque -> . LKEY bloquep
    (51) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 54

    bloque                         shift and go to state 111

state 86

    (65) escritura -> PRINT . LPAR escriturap

    LPAR            shift and go to state 112


state 87

    (41) funcionf -> VOID ID LPAR funcionp . RPAR bloque SEMICOLON

    RPAR            shift and go to state 113


state 88

    (43) funcionp -> funcionpp .

    RPAR            reduce using rule 43 (funcionp -> funcionpp .)


state 89

    (44) funcionp -> empty .

    RPAR            reduce using rule 44 (funcionp -> empty .)


state 90

    (45) funcionpp -> tipo . ID funcionppp

    ID              shift and go to state 114


state 91

    (42) funcionf -> tipo ID LPAR funcionp . RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp

    RPAR            shift and go to state 115


state 92

    (20) exp -> termino PLUS exp .

    RBRK            reduce using rule 20 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 20 (exp -> termino PLUS exp .)
    SEMICOLON       reduce using rule 20 (exp -> termino PLUS exp .)
    RPAR            reduce using rule 20 (exp -> termino PLUS exp .)
    MORETHAN        reduce using rule 20 (exp -> termino PLUS exp .)
    LESSTHAN        reduce using rule 20 (exp -> termino PLUS exp .)
    EQL             reduce using rule 20 (exp -> termino PLUS exp .)
    NOTEQL          reduce using rule 20 (exp -> termino PLUS exp .)


state 93

    (21) exp -> termino MINUS exp .

    RBRK            reduce using rule 21 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 21 (exp -> termino MINUS exp .)
    SEMICOLON       reduce using rule 21 (exp -> termino MINUS exp .)
    RPAR            reduce using rule 21 (exp -> termino MINUS exp .)
    MORETHAN        reduce using rule 21 (exp -> termino MINUS exp .)
    LESSTHAN        reduce using rule 21 (exp -> termino MINUS exp .)
    EQL             reduce using rule 21 (exp -> termino MINUS exp .)
    NOTEQL          reduce using rule 21 (exp -> termino MINUS exp .)


state 94

    (23) termino -> factor MULT termino .

    PLUS            reduce using rule 23 (termino -> factor MULT termino .)
    MINUS           reduce using rule 23 (termino -> factor MULT termino .)
    RBRK            reduce using rule 23 (termino -> factor MULT termino .)
    COMMA           reduce using rule 23 (termino -> factor MULT termino .)
    SEMICOLON       reduce using rule 23 (termino -> factor MULT termino .)
    RPAR            reduce using rule 23 (termino -> factor MULT termino .)
    MORETHAN        reduce using rule 23 (termino -> factor MULT termino .)
    LESSTHAN        reduce using rule 23 (termino -> factor MULT termino .)
    EQL             reduce using rule 23 (termino -> factor MULT termino .)
    NOTEQL          reduce using rule 23 (termino -> factor MULT termino .)


state 95

    (24) termino -> factor SLASH termino .

    PLUS            reduce using rule 24 (termino -> factor SLASH termino .)
    MINUS           reduce using rule 24 (termino -> factor SLASH termino .)
    RBRK            reduce using rule 24 (termino -> factor SLASH termino .)
    COMMA           reduce using rule 24 (termino -> factor SLASH termino .)
    SEMICOLON       reduce using rule 24 (termino -> factor SLASH termino .)
    RPAR            reduce using rule 24 (termino -> factor SLASH termino .)
    MORETHAN        reduce using rule 24 (termino -> factor SLASH termino .)
    LESSTHAN        reduce using rule 24 (termino -> factor SLASH termino .)
    EQL             reduce using rule 24 (termino -> factor SLASH termino .)
    NOTEQL          reduce using rule 24 (termino -> factor SLASH termino .)


state 96

    (26) factor -> LPAR exp RPAR .

    MULT            reduce using rule 26 (factor -> LPAR exp RPAR .)
    SLASH           reduce using rule 26 (factor -> LPAR exp RPAR .)
    PLUS            reduce using rule 26 (factor -> LPAR exp RPAR .)
    MINUS           reduce using rule 26 (factor -> LPAR exp RPAR .)
    RBRK            reduce using rule 26 (factor -> LPAR exp RPAR .)
    COMMA           reduce using rule 26 (factor -> LPAR exp RPAR .)
    SEMICOLON       reduce using rule 26 (factor -> LPAR exp RPAR .)
    RPAR            reduce using rule 26 (factor -> LPAR exp RPAR .)
    MORETHAN        reduce using rule 26 (factor -> LPAR exp RPAR .)
    LESSTHAN        reduce using rule 26 (factor -> LPAR exp RPAR .)
    EQL             reduce using rule 26 (factor -> LPAR exp RPAR .)
    NOTEQL          reduce using rule 26 (factor -> LPAR exp RPAR .)


state 97

    (34) llamafunc -> ID LPAR llamafuncp .

    MULT            reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    SLASH           reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    PLUS            reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    MINUS           reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    RBRK            reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    COMMA           reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    SEMICOLON       reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    RPAR            reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    MORETHAN        reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    LESSTHAN        reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    EQL             reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)
    NOTEQL          reduce using rule 34 (llamafunc -> ID LPAR llamafuncp .)


state 98

    (35) llamafuncp -> llamafuncpp .

    MULT            reduce using rule 35 (llamafuncp -> llamafuncpp .)
    SLASH           reduce using rule 35 (llamafuncp -> llamafuncpp .)
    PLUS            reduce using rule 35 (llamafuncp -> llamafuncpp .)
    MINUS           reduce using rule 35 (llamafuncp -> llamafuncpp .)
    RBRK            reduce using rule 35 (llamafuncp -> llamafuncpp .)
    COMMA           reduce using rule 35 (llamafuncp -> llamafuncpp .)
    SEMICOLON       reduce using rule 35 (llamafuncp -> llamafuncpp .)
    RPAR            reduce using rule 35 (llamafuncp -> llamafuncpp .)
    MORETHAN        reduce using rule 35 (llamafuncp -> llamafuncpp .)
    LESSTHAN        reduce using rule 35 (llamafuncp -> llamafuncpp .)
    EQL             reduce using rule 35 (llamafuncp -> llamafuncpp .)
    NOTEQL          reduce using rule 35 (llamafuncp -> llamafuncpp .)


state 99

    (36) llamafuncp -> llamafuncpppp .

    MULT            reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    SLASH           reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    PLUS            reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    MINUS           reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    RBRK            reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    COMMA           reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    SEMICOLON       reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    RPAR            reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    MORETHAN        reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    LESSTHAN        reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    EQL             reduce using rule 36 (llamafuncp -> llamafuncpppp .)
    NOTEQL          reduce using rule 36 (llamafuncp -> llamafuncpppp .)


state 100

    (37) llamafuncpp -> tipo . ID llamafuncppp

    ID              shift and go to state 116


state 101

    (40) llamafuncpppp -> RPAR .

    MULT            reduce using rule 40 (llamafuncpppp -> RPAR .)
    SLASH           reduce using rule 40 (llamafuncpppp -> RPAR .)
    PLUS            reduce using rule 40 (llamafuncpppp -> RPAR .)
    MINUS           reduce using rule 40 (llamafuncpppp -> RPAR .)
    RBRK            reduce using rule 40 (llamafuncpppp -> RPAR .)
    COMMA           reduce using rule 40 (llamafuncpppp -> RPAR .)
    SEMICOLON       reduce using rule 40 (llamafuncpppp -> RPAR .)
    RPAR            reduce using rule 40 (llamafuncpppp -> RPAR .)
    MORETHAN        reduce using rule 40 (llamafuncpppp -> RPAR .)
    LESSTHAN        reduce using rule 40 (llamafuncpppp -> RPAR .)
    EQL             reduce using rule 40 (llamafuncpppp -> RPAR .)
    NOTEQL          reduce using rule 40 (llamafuncpppp -> RPAR .)


state 102

    (52) bloquep -> estatuto bloquepp .

    SEMICOLON       reduce using rule 52 (bloquep -> estatuto bloquepp .)
    WHILE           reduce using rule 52 (bloquep -> estatuto bloquepp .)
    RETURN          reduce using rule 52 (bloquep -> estatuto bloquepp .)
    ELSE            reduce using rule 52 (bloquep -> estatuto bloquepp .)


state 103

    (53) bloquepp -> bloquep .

    SEMICOLON       reduce using rule 53 (bloquepp -> bloquep .)
    WHILE           reduce using rule 53 (bloquepp -> bloquep .)
    RETURN          reduce using rule 53 (bloquepp -> bloquep .)
    ELSE            reduce using rule 53 (bloquepp -> bloquep .)


state 104

    (54) bloquepp -> bloqueppp .

    SEMICOLON       reduce using rule 54 (bloquepp -> bloqueppp .)
    WHILE           reduce using rule 54 (bloquepp -> bloqueppp .)
    RETURN          reduce using rule 54 (bloquepp -> bloqueppp .)
    ELSE            reduce using rule 54 (bloquepp -> bloqueppp .)


state 105

    (61) estatuto -> llamafunc SEMICOLON .

    RKEY            reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    ID              reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    IF              reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    WHILE           reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    DO              reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    PRINT           reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)


state 106

    (62) asignacion -> ID array . asignacionp
    (64) asignacionp -> . AEQL exp SEMICOLON

    AEQL            shift and go to state 108

    asignacionp                    shift and go to state 117

state 107

    (63) asignacion -> ID asignacionp .

    RKEY            reduce using rule 63 (asignacion -> ID asignacionp .)
    ID              reduce using rule 63 (asignacion -> ID asignacionp .)
    IF              reduce using rule 63 (asignacion -> ID asignacionp .)
    WHILE           reduce using rule 63 (asignacion -> ID asignacionp .)
    DO              reduce using rule 63 (asignacion -> ID asignacionp .)
    PRINT           reduce using rule 63 (asignacion -> ID asignacionp .)


state 108

    (64) asignacionp -> AEQL . exp SEMICOLON
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 118
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 109

    (70) condif -> IF LPAR . expresion RPAR bloque condifp
    (75) expresion -> . exp expresionp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresion                      shift and go to state 119
    exp                            shift and go to state 120
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 110

    (73) condwhile -> WHILE LPAR . expresion RPAR bloque SEMICOLON
    (75) expresion -> . exp expresionp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresion                      shift and go to state 121
    exp                            shift and go to state 120
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 111

    (74) conddowhile -> DO bloque . WHILE LPAR expresion RPAR SEMICOLON

    WHILE           shift and go to state 122


state 112

    (65) escritura -> PRINT LPAR . escriturap
    (66) escriturap -> . exp escriturapp
    (67) escriturap -> . STRING escriturapp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    STRING          shift and go to state 125
    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    escriturap                     shift and go to state 123
    exp                            shift and go to state 124
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 113

    (41) funcionf -> VOID ID LPAR funcionp RPAR . bloque SEMICOLON
    (50) bloque -> . LKEY bloquep
    (51) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 54

    bloque                         shift and go to state 126

state 114

    (45) funcionpp -> tipo ID . funcionppp
    (46) funcionppp -> . COMMA funcionpp
    (47) funcionppp -> . empty
    (82) empty -> .

    COMMA           shift and go to state 128
    RPAR            reduce using rule 82 (empty -> .)

    funcionppp                     shift and go to state 127
    empty                          shift and go to state 129

state 115

    (42) funcionf -> tipo ID LPAR funcionp RPAR . bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (50) bloque -> . LKEY bloquep
    (51) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 54

    bloque                         shift and go to state 130

state 116

    (37) llamafuncpp -> tipo ID . llamafuncppp
    (38) llamafuncppp -> . COMMA llamafuncpp
    (39) llamafuncppp -> . llamafuncpppp
    (40) llamafuncpppp -> . RPAR

    COMMA           shift and go to state 132
    RPAR            shift and go to state 101

    llamafuncppp                   shift and go to state 131
    llamafuncpppp                  shift and go to state 133

state 117

    (62) asignacion -> ID array asignacionp .

    RKEY            reduce using rule 62 (asignacion -> ID array asignacionp .)
    ID              reduce using rule 62 (asignacion -> ID array asignacionp .)
    IF              reduce using rule 62 (asignacion -> ID array asignacionp .)
    WHILE           reduce using rule 62 (asignacion -> ID array asignacionp .)
    DO              reduce using rule 62 (asignacion -> ID array asignacionp .)
    PRINT           reduce using rule 62 (asignacion -> ID array asignacionp .)


state 118

    (64) asignacionp -> AEQL exp . SEMICOLON

    SEMICOLON       shift and go to state 134


state 119

    (70) condif -> IF LPAR expresion . RPAR bloque condifp

    RPAR            shift and go to state 135


state 120

    (75) expresion -> exp . expresionp
    (76) expresionp -> . MORETHAN expresionpp
    (77) expresionp -> . LESSTHAN expresionpp
    (78) expresionp -> . EQL expresionpp
    (79) expresionp -> . NOTEQL expresionpp

    MORETHAN        shift and go to state 137
    LESSTHAN        shift and go to state 138
    EQL             shift and go to state 139
    NOTEQL          shift and go to state 140

    expresionp                     shift and go to state 136

state 121

    (73) condwhile -> WHILE LPAR expresion . RPAR bloque SEMICOLON

    RPAR            shift and go to state 141


state 122

    (74) conddowhile -> DO bloque WHILE . LPAR expresion RPAR SEMICOLON

    LPAR            shift and go to state 142


state 123

    (65) escritura -> PRINT LPAR escriturap .

    RKEY            reduce using rule 65 (escritura -> PRINT LPAR escriturap .)
    ID              reduce using rule 65 (escritura -> PRINT LPAR escriturap .)
    IF              reduce using rule 65 (escritura -> PRINT LPAR escriturap .)
    WHILE           reduce using rule 65 (escritura -> PRINT LPAR escriturap .)
    DO              reduce using rule 65 (escritura -> PRINT LPAR escriturap .)
    PRINT           reduce using rule 65 (escritura -> PRINT LPAR escriturap .)


state 124

    (66) escriturap -> exp . escriturapp
    (68) escriturapp -> . COMMA escriturap
    (69) escriturapp -> . RPAR SEMICOLON

    COMMA           shift and go to state 144
    RPAR            shift and go to state 145

    escriturapp                    shift and go to state 143

state 125

    (67) escriturap -> STRING . escriturapp
    (68) escriturapp -> . COMMA escriturap
    (69) escriturapp -> . RPAR SEMICOLON

    COMMA           shift and go to state 144
    RPAR            shift and go to state 145

    escriturapp                    shift and go to state 146

state 126

    (41) funcionf -> VOID ID LPAR funcionp RPAR bloque . SEMICOLON

    SEMICOLON       shift and go to state 147


state 127

    (45) funcionpp -> tipo ID funcionppp .

    RPAR            reduce using rule 45 (funcionpp -> tipo ID funcionppp .)


state 128

    (46) funcionppp -> COMMA . funcionpp
    (45) funcionpp -> . tipo ID funcionppp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    funcionpp                      shift and go to state 148
    tipo                           shift and go to state 90

state 129

    (47) funcionppp -> empty .

    RPAR            reduce using rule 47 (funcionppp -> empty .)


state 130

    (42) funcionf -> tipo ID LPAR funcionp RPAR bloque . RETURN LPAR exp RPAR SEMICOLON funcionpppp

    RETURN          shift and go to state 149


state 131

    (37) llamafuncpp -> tipo ID llamafuncppp .

    MULT            reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    SLASH           reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    PLUS            reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    MINUS           reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    RBRK            reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    COMMA           reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    SEMICOLON       reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    RPAR            reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    MORETHAN        reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    LESSTHAN        reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    EQL             reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)
    NOTEQL          reduce using rule 37 (llamafuncpp -> tipo ID llamafuncppp .)


state 132

    (38) llamafuncppp -> COMMA . llamafuncpp
    (37) llamafuncpp -> . tipo ID llamafuncppp
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    llamafuncpp                    shift and go to state 150
    tipo                           shift and go to state 100

state 133

    (39) llamafuncppp -> llamafuncpppp .

    MULT            reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    SLASH           reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    PLUS            reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    MINUS           reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    RBRK            reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    COMMA           reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    SEMICOLON       reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    RPAR            reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    MORETHAN        reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    LESSTHAN        reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    EQL             reduce using rule 39 (llamafuncppp -> llamafuncpppp .)
    NOTEQL          reduce using rule 39 (llamafuncppp -> llamafuncpppp .)


state 134

    (64) asignacionp -> AEQL exp SEMICOLON .

    RKEY            reduce using rule 64 (asignacionp -> AEQL exp SEMICOLON .)
    ID              reduce using rule 64 (asignacionp -> AEQL exp SEMICOLON .)
    IF              reduce using rule 64 (asignacionp -> AEQL exp SEMICOLON .)
    WHILE           reduce using rule 64 (asignacionp -> AEQL exp SEMICOLON .)
    DO              reduce using rule 64 (asignacionp -> AEQL exp SEMICOLON .)
    PRINT           reduce using rule 64 (asignacionp -> AEQL exp SEMICOLON .)


state 135

    (70) condif -> IF LPAR expresion RPAR . bloque condifp
    (50) bloque -> . LKEY bloquep
    (51) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 54

    bloque                         shift and go to state 151

state 136

    (75) expresion -> exp expresionp .

    RPAR            reduce using rule 75 (expresion -> exp expresionp .)


state 137

    (76) expresionp -> MORETHAN . expresionpp
    (80) expresionpp -> . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresionpp                    shift and go to state 152
    exp                            shift and go to state 153
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 138

    (77) expresionp -> LESSTHAN . expresionpp
    (80) expresionpp -> . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresionpp                    shift and go to state 154
    exp                            shift and go to state 153
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 139

    (78) expresionp -> EQL . expresionpp
    (80) expresionpp -> . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresionpp                    shift and go to state 155
    exp                            shift and go to state 153
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 140

    (79) expresionp -> NOTEQL . expresionpp
    (80) expresionpp -> . exp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresionpp                    shift and go to state 156
    exp                            shift and go to state 153
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 141

    (73) condwhile -> WHILE LPAR expresion RPAR . bloque SEMICOLON
    (50) bloque -> . LKEY bloquep
    (51) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 54

    bloque                         shift and go to state 157

state 142

    (74) conddowhile -> DO bloque WHILE LPAR . expresion RPAR SEMICOLON
    (75) expresion -> . exp expresionp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    expresion                      shift and go to state 158
    exp                            shift and go to state 120
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 143

    (66) escriturap -> exp escriturapp .

    RKEY            reduce using rule 66 (escriturap -> exp escriturapp .)
    ID              reduce using rule 66 (escriturap -> exp escriturapp .)
    IF              reduce using rule 66 (escriturap -> exp escriturapp .)
    WHILE           reduce using rule 66 (escriturap -> exp escriturapp .)
    DO              reduce using rule 66 (escriturap -> exp escriturapp .)
    PRINT           reduce using rule 66 (escriturap -> exp escriturapp .)


state 144

    (68) escriturapp -> COMMA . escriturap
    (66) escriturap -> . exp escriturapp
    (67) escriturap -> . STRING escriturapp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    STRING          shift and go to state 125
    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    escriturap                     shift and go to state 159
    exp                            shift and go to state 124
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 145

    (69) escriturapp -> RPAR . SEMICOLON

    SEMICOLON       shift and go to state 160


state 146

    (67) escriturap -> STRING escriturapp .

    RKEY            reduce using rule 67 (escriturap -> STRING escriturapp .)
    ID              reduce using rule 67 (escriturap -> STRING escriturapp .)
    IF              reduce using rule 67 (escriturap -> STRING escriturapp .)
    WHILE           reduce using rule 67 (escriturap -> STRING escriturapp .)
    DO              reduce using rule 67 (escriturap -> STRING escriturapp .)
    PRINT           reduce using rule 67 (escriturap -> STRING escriturapp .)


state 147

    (41) funcionf -> VOID ID LPAR funcionp RPAR bloque SEMICOLON .

    MAIN            reduce using rule 41 (funcionf -> VOID ID LPAR funcionp RPAR bloque SEMICOLON .)


state 148

    (46) funcionppp -> COMMA funcionpp .

    RPAR            reduce using rule 46 (funcionppp -> COMMA funcionpp .)


state 149

    (42) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN . LPAR exp RPAR SEMICOLON funcionpppp

    LPAR            shift and go to state 161


state 150

    (38) llamafuncppp -> COMMA llamafuncpp .

    MULT            reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    SLASH           reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    PLUS            reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    MINUS           reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    RBRK            reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    COMMA           reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    SEMICOLON       reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    RPAR            reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    MORETHAN        reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    LESSTHAN        reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    EQL             reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)
    NOTEQL          reduce using rule 38 (llamafuncppp -> COMMA llamafuncpp .)


state 151

    (70) condif -> IF LPAR expresion RPAR bloque . condifp
    (71) condifp -> . ELSE bloque SEMICOLON
    (72) condifp -> . SEMICOLON

    ELSE            shift and go to state 163
    SEMICOLON       shift and go to state 164

    condifp                        shift and go to state 162

state 152

    (76) expresionp -> MORETHAN expresionpp .

    RPAR            reduce using rule 76 (expresionp -> MORETHAN expresionpp .)


state 153

    (80) expresionpp -> exp .

    RPAR            reduce using rule 80 (expresionpp -> exp .)


state 154

    (77) expresionp -> LESSTHAN expresionpp .

    RPAR            reduce using rule 77 (expresionp -> LESSTHAN expresionpp .)


state 155

    (78) expresionp -> EQL expresionpp .

    RPAR            reduce using rule 78 (expresionp -> EQL expresionpp .)


state 156

    (79) expresionp -> NOTEQL expresionpp .

    RPAR            reduce using rule 79 (expresionp -> NOTEQL expresionpp .)


state 157

    (73) condwhile -> WHILE LPAR expresion RPAR bloque . SEMICOLON

    SEMICOLON       shift and go to state 165


state 158

    (74) conddowhile -> DO bloque WHILE LPAR expresion . RPAR SEMICOLON

    RPAR            shift and go to state 166


state 159

    (68) escriturapp -> COMMA escriturap .

    RKEY            reduce using rule 68 (escriturapp -> COMMA escriturap .)
    ID              reduce using rule 68 (escriturapp -> COMMA escriturap .)
    IF              reduce using rule 68 (escriturapp -> COMMA escriturap .)
    WHILE           reduce using rule 68 (escriturapp -> COMMA escriturap .)
    DO              reduce using rule 68 (escriturapp -> COMMA escriturap .)
    PRINT           reduce using rule 68 (escriturapp -> COMMA escriturap .)


state 160

    (69) escriturapp -> RPAR SEMICOLON .

    RKEY            reduce using rule 69 (escriturapp -> RPAR SEMICOLON .)
    ID              reduce using rule 69 (escriturapp -> RPAR SEMICOLON .)
    IF              reduce using rule 69 (escriturapp -> RPAR SEMICOLON .)
    WHILE           reduce using rule 69 (escriturapp -> RPAR SEMICOLON .)
    DO              reduce using rule 69 (escriturapp -> RPAR SEMICOLON .)
    PRINT           reduce using rule 69 (escriturapp -> RPAR SEMICOLON .)


state 161

    (42) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR . exp RPAR SEMICOLON funcionpppp
    (20) exp -> . termino PLUS exp
    (21) exp -> . termino MINUS exp
    (22) exp -> . termino empty
    (23) termino -> . factor MULT termino
    (24) termino -> . factor SLASH termino
    (25) termino -> . factor empty
    (26) factor -> . LPAR exp RPAR
    (27) factor -> . PLUS varcte
    (28) factor -> . MINUS varcte
    (29) factor -> . varcte
    (30) varcte -> . ID
    (31) varcte -> . NUMFLOAT
    (32) varcte -> . NUMINT
    (33) varcte -> . llamafunc
    (34) llamafunc -> . ID LPAR llamafuncp

    LPAR            shift and go to state 38
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    ID              shift and go to state 40
    NUMFLOAT        shift and go to state 41
    NUMINT          shift and go to state 42

    exp                            shift and go to state 167
    termino                        shift and go to state 34
    factor                         shift and go to state 37
    varcte                         shift and go to state 39
    llamafunc                      shift and go to state 43

state 162

    (70) condif -> IF LPAR expresion RPAR bloque condifp .

    RKEY            reduce using rule 70 (condif -> IF LPAR expresion RPAR bloque condifp .)
    ID              reduce using rule 70 (condif -> IF LPAR expresion RPAR bloque condifp .)
    IF              reduce using rule 70 (condif -> IF LPAR expresion RPAR bloque condifp .)
    WHILE           reduce using rule 70 (condif -> IF LPAR expresion RPAR bloque condifp .)
    DO              reduce using rule 70 (condif -> IF LPAR expresion RPAR bloque condifp .)
    PRINT           reduce using rule 70 (condif -> IF LPAR expresion RPAR bloque condifp .)


state 163

    (71) condifp -> ELSE . bloque SEMICOLON
    (50) bloque -> . LKEY bloquep
    (51) bloque -> . LKEY bloqueppp

    LKEY            shift and go to state 54

    bloque                         shift and go to state 168

state 164

    (72) condifp -> SEMICOLON .

    RKEY            reduce using rule 72 (condifp -> SEMICOLON .)
    ID              reduce using rule 72 (condifp -> SEMICOLON .)
    IF              reduce using rule 72 (condifp -> SEMICOLON .)
    WHILE           reduce using rule 72 (condifp -> SEMICOLON .)
    DO              reduce using rule 72 (condifp -> SEMICOLON .)
    PRINT           reduce using rule 72 (condifp -> SEMICOLON .)


state 165

    (73) condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .

    RKEY            reduce using rule 73 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    ID              reduce using rule 73 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    IF              reduce using rule 73 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    WHILE           reduce using rule 73 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    DO              reduce using rule 73 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)
    PRINT           reduce using rule 73 (condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON .)


state 166

    (74) conddowhile -> DO bloque WHILE LPAR expresion RPAR . SEMICOLON

    SEMICOLON       shift and go to state 169


state 167

    (42) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp . RPAR SEMICOLON funcionpppp

    RPAR            shift and go to state 170


state 168

    (71) condifp -> ELSE bloque . SEMICOLON

    SEMICOLON       shift and go to state 171


state 169

    (74) conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .

    RKEY            reduce using rule 74 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    ID              reduce using rule 74 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    IF              reduce using rule 74 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    WHILE           reduce using rule 74 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    DO              reduce using rule 74 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)
    PRINT           reduce using rule 74 (conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON .)


state 170

    (42) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR . SEMICOLON funcionpppp

    SEMICOLON       shift and go to state 172


state 171

    (71) condifp -> ELSE bloque SEMICOLON .

    RKEY            reduce using rule 71 (condifp -> ELSE bloque SEMICOLON .)
    ID              reduce using rule 71 (condifp -> ELSE bloque SEMICOLON .)
    IF              reduce using rule 71 (condifp -> ELSE bloque SEMICOLON .)
    WHILE           reduce using rule 71 (condifp -> ELSE bloque SEMICOLON .)
    DO              reduce using rule 71 (condifp -> ELSE bloque SEMICOLON .)
    PRINT           reduce using rule 71 (condifp -> ELSE bloque SEMICOLON .)


state 172

    (42) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON . funcionpppp
    (48) funcionpppp -> . funcionf
    (49) funcionpppp -> . empty
    (41) funcionf -> . VOID ID LPAR funcionp RPAR bloque SEMICOLON
    (42) funcionf -> . tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp
    (82) empty -> .
    (17) tipo -> . INT
    (18) tipo -> . FLOAT

    VOID            shift and go to state 18
    MAIN            reduce using rule 82 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9

    tipo                           shift and go to state 19
    funcionpppp                    shift and go to state 173
    funcionf                       shift and go to state 174
    empty                          shift and go to state 175

state 173

    (42) funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp .

    MAIN            reduce using rule 42 (funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp .)


state 174

    (48) funcionpppp -> funcionf .

    MAIN            reduce using rule 48 (funcionpppp -> funcionf .)


state 175

    (49) funcionpppp -> empty .

    MAIN            reduce using rule 49 (funcionpppp -> empty .)

