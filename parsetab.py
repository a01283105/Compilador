
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightAEQLleftEQLLESSTHANMORETHANNOTEQLleftPLUSMINUSleftMULTSLASHleftLPARRPARAEQL COMMA DO ELSE EQL FLOAT FUNC ID IF INT LBRK LESSTHAN LKEY LPAR MAIN MINUS MORETHAN MULT NOTEQL NUMFLOAT NUMINT PLUS PRINT RBRK RETURN RKEY RPAR SEMICOLON SLASH STRING VAR VOID WHILEprograma : VAR SEMICOLON variablevariable : varf FUNC SEMICOLON funciones\n                | FUNC SEMICOLON funciones\n    funciones : funcionf MAIN SEMICOLON maines\n                | MAIN SEMICOLON maines\n    maines : mainf\n              | empty\n    varf : tipo varpvarp : ID array varpp\n            | ID varpp\n    varpp : AEQL exp varppp\n             | varppp\n    varppp : COMMA varp\n              | SEMICOLON varpppp empty\n    varpppp : varf\n               | empty\n    tipo : INT\n            | FLOAT\n    array : LBRK exp RBRKexp : termino PLUS exp\n           | termino MINUS exp\n           | termino empty\n    termino : factor MULT termino\n               | factor SLASH termino\n               | factor empty\n    factor : LPAR exp RPAR\n              | PLUS varcte\n              | MINUS varcte\n              | varcte\n    varcte : ID\n              | NUMFLOAT\n              | NUMINT\n              | llamafunc\n    llamafunc : ID LPAR llamafuncp\n    llamafuncp : llamafuncpp\n                 | llamafuncpppp\n    llamafuncpp : tipo ID llamafuncppp \n    llamafuncppp : COMMA llamafuncpp\n                    | llamafuncpppp\n    llamafuncpppp : RPAR \n    funcionf : VOID ID LPAR funcionp RPAR bloque SEMICOLON\n                | tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp\n    funcionp : funcionpp\n                | empty\n    funcionpp : tipo ID funcionppp\n    funcionppp : COMMA funcionpp\n                  | empty\n    funcionpppp : funcionf\n                   | empty\n    bloque : LKEY bloquep\n              | LKEY bloqueppp\n    bloquep : estatuto bloquepp\n    bloquepp : bloquep\n                | bloqueppp\n    bloqueppp : RKEY\n    estatuto : asignacion\n                | condif\n                | condwhile\n                | conddowhile\n                | escritura\n                | llamafunc SEMICOLON\n    asignacion : ID array asignacionp\n                  | ID asignacionp\n    asignacionp : AEQL exp SEMICOLON\n    escritura : PRINT LPAR escriturap\n    escriturap : exp escriturapp\n                  | STRING escriturapp\n    escriturapp : COMMA escriturap\n                   | RPAR SEMICOLON\n    condif : IF LPAR expresion RPAR bloque condifp\n    condifp : ELSE bloque SEMICOLON\n               | SEMICOLON\n    condwhile : WHILE LPAR expresion RPAR bloque SEMICOLON\n    conddowhile : DO bloque WHILE LPAR expresion RPAR SEMICOLON\n    expresion : exp expresionp\n    expresionp : MORETHAN expresionpp\n                  | LESSTHAN expresionpp\n                  | EQL expresionpp\n                  | NOTEQL expresionpp\n    expresionpp : exp\n    mainf : bloque SEMICOLON\n    empty :'
    
_lr_action_items = {'VAR':([0,],[2,]),'$end':([1,4,15,27,29,49,50,51,52,70,71,],[0,-1,-3,-2,-82,-82,-5,-6,-7,-4,-81,]),'SEMICOLON':([2,6,10,13,17,20,28,34,37,39,40,41,42,43,44,53,57,60,61,62,65,72,73,75,81,92,93,94,95,96,97,98,99,101,102,103,104,118,126,131,133,145,150,151,157,166,168,170,],[3,11,14,26,29,26,49,-82,-82,-29,-30,-31,-32,-33,26,71,-19,-22,-27,-28,-25,-50,-51,-55,105,-20,-21,-23,-24,-26,-34,-35,-36,-40,-52,-53,-54,134,147,-37,-39,160,-38,164,165,169,171,172,]),'FUNC':([3,5,12,21,24,26,32,45,46,47,48,68,69,],[6,10,-8,-10,-12,-82,-9,-13,-82,-16,-15,-11,-14,]),'INT':([3,11,14,26,55,56,67,128,132,172,],[8,8,8,8,8,8,8,8,8,8,]),'FLOAT':([3,11,14,26,55,56,67,128,132,172,],[9,9,9,9,9,9,9,9,9,9,]),'ID':([7,8,9,18,19,22,23,25,35,36,38,54,58,59,63,64,74,76,77,78,79,80,90,100,105,107,108,109,110,112,117,123,134,137,138,139,140,142,143,144,146,159,160,161,162,164,165,169,171,],[13,-17,-18,30,31,40,40,13,40,40,40,82,40,40,40,40,82,-56,-57,-58,-59,-60,114,116,-61,-63,40,40,40,40,-62,-65,-64,40,40,40,40,40,-66,40,-67,-68,-69,40,-70,-72,-73,-74,-71,]),'MAIN':([11,14,16,147,172,173,174,175,],[17,17,28,-41,-82,-42,-48,-49,]),'VOID':([11,14,172,],[18,18,18,]),'LBRK':([13,82,],[22,22,]),'AEQL':([13,20,57,82,106,],[23,23,-19,108,108,]),'COMMA':([13,20,34,37,39,40,41,42,43,44,57,60,61,62,65,92,93,94,95,96,97,98,99,101,114,116,124,125,131,133,150,],[25,25,-82,-82,-29,-30,-31,-32,-33,25,-19,-22,-27,-28,-25,-20,-21,-23,-24,-26,-34,-35,-36,-40,128,132,144,144,-37,-39,-38,]),'LPAR':([22,23,30,31,38,40,58,59,63,64,82,83,84,86,108,109,110,112,122,137,138,139,140,142,144,149,161,],[38,38,55,56,38,67,38,38,38,38,67,109,110,112,38,38,38,38,142,38,38,38,38,38,38,161,38,]),'PLUS':([22,23,34,37,38,39,40,41,42,43,58,59,61,62,63,64,65,94,95,96,97,98,99,101,108,109,110,112,131,133,137,138,139,140,142,144,150,161,],[35,35,58,-82,35,-29,-30,-31,-32,-33,35,35,-27,-28,35,35,-25,-23,-24,-26,-34,-35,-36,-40,35,35,35,35,-37,-39,35,35,35,35,35,35,-38,35,]),'MINUS':([22,23,34,37,38,39,40,41,42,43,58,59,61,62,63,64,65,94,95,96,97,98,99,101,108,109,110,112,131,133,137,138,139,140,142,144,150,161,],[36,36,59,-82,36,-29,-30,-31,-32,-33,36,36,-27,-28,36,36,-25,-23,-24,-26,-34,-35,-36,-40,36,36,36,36,-37,-39,36,36,36,36,36,36,-38,36,]),'NUMFLOAT':([22,23,35,36,38,58,59,63,64,108,109,110,112,137,138,139,140,142,144,161,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'NUMINT':([22,23,35,36,38,58,59,63,64,108,109,110,112,137,138,139,140,142,144,161,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'LKEY':([29,49,85,113,115,135,141,163,],[54,54,54,54,54,54,54,54,]),'RBRK':([33,34,37,39,40,41,42,43,60,61,62,65,92,93,94,95,96,97,98,99,101,131,133,150,],[57,-82,-82,-29,-30,-31,-32,-33,-22,-27,-28,-25,-20,-21,-23,-24,-26,-34,-35,-36,-40,-37,-39,-38,]),'RPAR':([34,37,39,40,41,42,43,55,56,60,61,62,65,66,67,87,88,89,91,92,93,94,95,96,97,98,99,101,114,116,119,121,124,125,127,129,131,133,136,148,150,152,153,154,155,156,158,167,],[-82,-82,-29,-30,-31,-32,-33,-82,-82,-22,-27,-28,-25,96,101,113,-43,-44,115,-20,-21,-23,-24,-26,-34,-35,-36,-40,-82,101,135,141,145,145,-45,-47,-37,-39,-75,-46,-38,-76,-80,-77,-78,-79,166,170,]),'MORETHAN':([34,37,39,40,41,42,43,60,61,62,65,92,93,94,95,96,97,98,99,101,120,131,133,150,],[-82,-82,-29,-30,-31,-32,-33,-22,-27,-28,-25,-20,-21,-23,-24,-26,-34,-35,-36,-40,137,-37,-39,-38,]),'LESSTHAN':([34,37,39,40,41,42,43,60,61,62,65,92,93,94,95,96,97,98,99,101,120,131,133,150,],[-82,-82,-29,-30,-31,-32,-33,-22,-27,-28,-25,-20,-21,-23,-24,-26,-34,-35,-36,-40,138,-37,-39,-38,]),'EQL':([34,37,39,40,41,42,43,60,61,62,65,92,93,94,95,96,97,98,99,101,120,131,133,150,],[-82,-82,-29,-30,-31,-32,-33,-22,-27,-28,-25,-20,-21,-23,-24,-26,-34,-35,-36,-40,139,-37,-39,-38,]),'NOTEQL':([34,37,39,40,41,42,43,60,61,62,65,92,93,94,95,96,97,98,99,101,120,131,133,150,],[-82,-82,-29,-30,-31,-32,-33,-22,-27,-28,-25,-20,-21,-23,-24,-26,-34,-35,-36,-40,140,-37,-39,-38,]),'MULT':([37,39,40,41,42,43,61,62,96,97,98,99,101,131,133,150,],[63,-29,-30,-31,-32,-33,-27,-28,-26,-34,-35,-36,-40,-37,-39,-38,]),'SLASH':([37,39,40,41,42,43,61,62,96,97,98,99,101,131,133,150,],[64,-29,-30,-31,-32,-33,-27,-28,-26,-34,-35,-36,-40,-37,-39,-38,]),'RKEY':([54,74,76,77,78,79,80,105,107,117,123,134,143,146,159,160,162,164,165,169,171,],[75,75,-56,-57,-58,-59,-60,-61,-63,-62,-65,-64,-66,-67,-68,-69,-70,-72,-73,-74,-71,]),'IF':([54,74,76,77,78,79,80,105,107,117,123,134,143,146,159,160,162,164,165,169,171,],[83,83,-56,-57,-58,-59,-60,-61,-63,-62,-65,-64,-66,-67,-68,-69,-70,-72,-73,-74,-71,]),'WHILE':([54,72,73,74,75,76,77,78,79,80,102,103,104,105,107,111,117,123,134,143,146,159,160,162,164,165,169,171,],[84,-50,-51,84,-55,-56,-57,-58,-59,-60,-52,-53,-54,-61,-63,122,-62,-65,-64,-66,-67,-68,-69,-70,-72,-73,-74,-71,]),'DO':([54,74,76,77,78,79,80,105,107,117,123,134,143,146,159,160,162,164,165,169,171,],[85,85,-56,-57,-58,-59,-60,-61,-63,-62,-65,-64,-66,-67,-68,-69,-70,-72,-73,-74,-71,]),'PRINT':([54,74,76,77,78,79,80,105,107,117,123,134,143,146,159,160,162,164,165,169,171,],[86,86,-56,-57,-58,-59,-60,-61,-63,-62,-65,-64,-66,-67,-68,-69,-70,-72,-73,-74,-71,]),'RETURN':([72,73,75,102,103,104,130,],[-50,-51,-55,-52,-53,-54,149,]),'ELSE':([72,73,75,102,103,104,151,],[-50,-51,-55,-52,-53,-54,163,]),'STRING':([112,144,],[125,125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'variable':([3,],[4,]),'varf':([3,26,],[5,48,]),'tipo':([3,11,14,26,55,56,67,128,132,172,],[7,19,19,7,90,90,100,90,100,19,]),'varp':([7,25,],[12,45,]),'funciones':([11,14,],[15,27,]),'funcionf':([11,14,172,],[16,16,174,]),'array':([13,82,],[20,106,]),'varpp':([13,20,],[21,32,]),'varppp':([13,20,44,],[24,24,68,]),'exp':([22,23,38,58,59,108,109,110,112,137,138,139,140,142,144,161,],[33,44,66,92,93,118,120,120,124,153,153,153,153,120,124,167,]),'termino':([22,23,38,58,59,63,64,108,109,110,112,137,138,139,140,142,144,161,],[34,34,34,34,34,94,95,34,34,34,34,34,34,34,34,34,34,34,]),'factor':([22,23,38,58,59,63,64,108,109,110,112,137,138,139,140,142,144,161,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'varcte':([22,23,35,36,38,58,59,63,64,108,109,110,112,137,138,139,140,142,144,161,],[39,39,61,62,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'llamafunc':([22,23,35,36,38,54,58,59,63,64,74,108,109,110,112,137,138,139,140,142,144,161,],[43,43,43,43,43,81,43,43,43,43,81,43,43,43,43,43,43,43,43,43,43,43,]),'varpppp':([26,],[46,]),'empty':([26,29,34,37,46,49,55,56,114,172,],[47,52,60,65,69,52,89,89,129,175,]),'maines':([29,49,],[50,70,]),'mainf':([29,49,],[51,51,]),'bloque':([29,49,85,113,115,135,141,163,],[53,53,111,126,130,151,157,168,]),'bloquep':([54,74,],[72,103,]),'bloqueppp':([54,74,],[73,104,]),'estatuto':([54,74,],[74,74,]),'asignacion':([54,74,],[76,76,]),'condif':([54,74,],[77,77,]),'condwhile':([54,74,],[78,78,]),'conddowhile':([54,74,],[79,79,]),'escritura':([54,74,],[80,80,]),'funcionp':([55,56,],[87,91,]),'funcionpp':([55,56,128,],[88,88,148,]),'llamafuncp':([67,],[97,]),'llamafuncpp':([67,132,],[98,150,]),'llamafuncpppp':([67,116,],[99,133,]),'bloquepp':([74,],[102,]),'asignacionp':([82,106,],[107,117,]),'expresion':([109,110,142,],[119,121,158,]),'escriturap':([112,144,],[123,159,]),'funcionppp':([114,],[127,]),'llamafuncppp':([116,],[131,]),'expresionp':([120,],[136,]),'escriturapp':([124,125,],[143,146,]),'expresionpp':([137,138,139,140,],[152,154,155,156,]),'condifp':([151,],[162,]),'funcionpppp':([172,],[173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> VAR SEMICOLON variable','programa',3,'p_programa','anaSintaxis.py',22),
  ('variable -> varf FUNC SEMICOLON funciones','variable',4,'p_programa1','anaSintaxis.py',25),
  ('variable -> FUNC SEMICOLON funciones','variable',3,'p_programa1','anaSintaxis.py',26),
  ('funciones -> funcionf MAIN SEMICOLON maines','funciones',4,'p_programa2','anaSintaxis.py',30),
  ('funciones -> MAIN SEMICOLON maines','funciones',3,'p_programa2','anaSintaxis.py',31),
  ('maines -> mainf','maines',1,'p_programa3','anaSintaxis.py',35),
  ('maines -> empty','maines',1,'p_programa3','anaSintaxis.py',36),
  ('varf -> tipo varp','varf',2,'p_variable1','anaSintaxis.py',40),
  ('varp -> ID array varpp','varp',3,'p_variable2','anaSintaxis.py',43),
  ('varp -> ID varpp','varp',2,'p_variable2','anaSintaxis.py',44),
  ('varpp -> AEQL exp varppp','varpp',3,'p_variable3','anaSintaxis.py',48),
  ('varpp -> varppp','varpp',1,'p_variable3','anaSintaxis.py',49),
  ('varppp -> COMMA varp','varppp',2,'p_variable4','anaSintaxis.py',53),
  ('varppp -> SEMICOLON varpppp empty','varppp',3,'p_variable4','anaSintaxis.py',54),
  ('varpppp -> varf','varpppp',1,'p_variable5','anaSintaxis.py',58),
  ('varpppp -> empty','varpppp',1,'p_variable5','anaSintaxis.py',59),
  ('tipo -> INT','tipo',1,'p_tipo','anaSintaxis.py',63),
  ('tipo -> FLOAT','tipo',1,'p_tipo','anaSintaxis.py',64),
  ('array -> LBRK exp RBRK','array',3,'p_array','anaSintaxis.py',68),
  ('exp -> termino PLUS exp','exp',3,'p_exp','anaSintaxis.py',71),
  ('exp -> termino MINUS exp','exp',3,'p_exp','anaSintaxis.py',72),
  ('exp -> termino empty','exp',2,'p_exp','anaSintaxis.py',73),
  ('termino -> factor MULT termino','termino',3,'p_termino','anaSintaxis.py',77),
  ('termino -> factor SLASH termino','termino',3,'p_termino','anaSintaxis.py',78),
  ('termino -> factor empty','termino',2,'p_termino','anaSintaxis.py',79),
  ('factor -> LPAR exp RPAR','factor',3,'p_factor','anaSintaxis.py',83),
  ('factor -> PLUS varcte','factor',2,'p_factor','anaSintaxis.py',84),
  ('factor -> MINUS varcte','factor',2,'p_factor','anaSintaxis.py',85),
  ('factor -> varcte','factor',1,'p_factor','anaSintaxis.py',86),
  ('varcte -> ID','varcte',1,'p_varcte','anaSintaxis.py',90),
  ('varcte -> NUMFLOAT','varcte',1,'p_varcte','anaSintaxis.py',91),
  ('varcte -> NUMINT','varcte',1,'p_varcte','anaSintaxis.py',92),
  ('varcte -> llamafunc','varcte',1,'p_varcte','anaSintaxis.py',93),
  ('llamafunc -> ID LPAR llamafuncp','llamafunc',3,'p_llamafunc1','anaSintaxis.py',98),
  ('llamafuncp -> llamafuncpp','llamafuncp',1,'p_llamafunc2','anaSintaxis.py',102),
  ('llamafuncp -> llamafuncpppp','llamafuncp',1,'p_llamafunc2','anaSintaxis.py',103),
  ('llamafuncpp -> tipo ID llamafuncppp','llamafuncpp',3,'p_llamafunc3','anaSintaxis.py',107),
  ('llamafuncppp -> COMMA llamafuncpp','llamafuncppp',2,'p_llamafunc4','anaSintaxis.py',110),
  ('llamafuncppp -> llamafuncpppp','llamafuncppp',1,'p_llamafunc4','anaSintaxis.py',111),
  ('llamafuncpppp -> RPAR','llamafuncpppp',1,'p_llamafunc5','anaSintaxis.py',114),
  ('funcionf -> VOID ID LPAR funcionp RPAR bloque SEMICOLON','funcionf',7,'p_funcion1','anaSintaxis.py',119),
  ('funcionf -> tipo ID LPAR funcionp RPAR bloque RETURN LPAR exp RPAR SEMICOLON funcionpppp','funcionf',12,'p_funcion1','anaSintaxis.py',120),
  ('funcionp -> funcionpp','funcionp',1,'p_funcion3','anaSintaxis.py',124),
  ('funcionp -> empty','funcionp',1,'p_funcion3','anaSintaxis.py',125),
  ('funcionpp -> tipo ID funcionppp','funcionpp',3,'p_funcion4','anaSintaxis.py',129),
  ('funcionppp -> COMMA funcionpp','funcionppp',2,'p_funcion5','anaSintaxis.py',133),
  ('funcionppp -> empty','funcionppp',1,'p_funcion5','anaSintaxis.py',134),
  ('funcionpppp -> funcionf','funcionpppp',1,'p_funcion6','anaSintaxis.py',138),
  ('funcionpppp -> empty','funcionpppp',1,'p_funcion6','anaSintaxis.py',139),
  ('bloque -> LKEY bloquep','bloque',2,'p_bloque1','anaSintaxis.py',143),
  ('bloque -> LKEY bloqueppp','bloque',2,'p_bloque1','anaSintaxis.py',144),
  ('bloquep -> estatuto bloquepp','bloquep',2,'p_bloque2','anaSintaxis.py',148),
  ('bloquepp -> bloquep','bloquepp',1,'p_bloque3','anaSintaxis.py',152),
  ('bloquepp -> bloqueppp','bloquepp',1,'p_bloque3','anaSintaxis.py',153),
  ('bloqueppp -> RKEY','bloqueppp',1,'p_bloque4','anaSintaxis.py',157),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','anaSintaxis.py',161),
  ('estatuto -> condif','estatuto',1,'p_estatuto','anaSintaxis.py',162),
  ('estatuto -> condwhile','estatuto',1,'p_estatuto','anaSintaxis.py',163),
  ('estatuto -> conddowhile','estatuto',1,'p_estatuto','anaSintaxis.py',164),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','anaSintaxis.py',165),
  ('estatuto -> llamafunc SEMICOLON','estatuto',2,'p_estatuto','anaSintaxis.py',166),
  ('asignacion -> ID array asignacionp','asignacion',3,'p_asignacion','anaSintaxis.py',170),
  ('asignacion -> ID asignacionp','asignacion',2,'p_asignacion','anaSintaxis.py',171),
  ('asignacionp -> AEQL exp SEMICOLON','asignacionp',3,'p_asignacion2','anaSintaxis.py',175),
  ('escritura -> PRINT LPAR escriturap','escritura',3,'p_escritura1','anaSintaxis.py',179),
  ('escriturap -> exp escriturapp','escriturap',2,'p_escritura2','anaSintaxis.py',183),
  ('escriturap -> STRING escriturapp','escriturap',2,'p_escritura2','anaSintaxis.py',184),
  ('escriturapp -> COMMA escriturap','escriturapp',2,'p_escritura3','anaSintaxis.py',188),
  ('escriturapp -> RPAR SEMICOLON','escriturapp',2,'p_escritura3','anaSintaxis.py',189),
  ('condif -> IF LPAR expresion RPAR bloque condifp','condif',6,'p_condif1','anaSintaxis.py',193),
  ('condifp -> ELSE bloque SEMICOLON','condifp',3,'p_condif2','anaSintaxis.py',197),
  ('condifp -> SEMICOLON','condifp',1,'p_condif2','anaSintaxis.py',198),
  ('condwhile -> WHILE LPAR expresion RPAR bloque SEMICOLON','condwhile',6,'p_condwhile','anaSintaxis.py',202),
  ('conddowhile -> DO bloque WHILE LPAR expresion RPAR SEMICOLON','conddowhile',7,'p_conddowhile','anaSintaxis.py',206),
  ('expresion -> exp expresionp','expresion',2,'p_expresion1','anaSintaxis.py',210),
  ('expresionp -> MORETHAN expresionpp','expresionp',2,'p_expresion2','anaSintaxis.py',214),
  ('expresionp -> LESSTHAN expresionpp','expresionp',2,'p_expresion2','anaSintaxis.py',215),
  ('expresionp -> EQL expresionpp','expresionp',2,'p_expresion2','anaSintaxis.py',216),
  ('expresionp -> NOTEQL expresionpp','expresionp',2,'p_expresion2','anaSintaxis.py',217),
  ('expresionpp -> exp','expresionpp',1,'p_expresion3','anaSintaxis.py',221),
  ('mainf -> bloque SEMICOLON','mainf',2,'p_main','anaSintaxis.py',225),
  ('empty -> <empty>','empty',0,'p_empty','anaSintaxis.py',234),
]
